
bootloader_v2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e44  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800401c  0800401c  0000501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004248  08004248  00006044  2**0
                  CONTENTS
  4 .ARM          00000000  08004248  08004248  00006044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004248  08004248  00006044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004248  08004248  00005248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800424c  0800424c  0000524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  08004250  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000044  08004294  00006044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08004294  000060c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9ed  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002446  00000000  00000000  00010a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00012ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000851  00000000  00000000  000139e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025306  00000000  00000000  00014239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c641  00000000  00000000  0003953f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e865f  00000000  00000000  00045b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e1df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c18  00000000  00000000  0012e224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00130e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000044 	.word	0x20000044
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004004 	.word	0x08004004

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000048 	.word	0x20000048
 8000214:	08004004 	.word	0x08004004

08000218 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t *RoundKey, const uint8_t *Key)
{
 8000218:	b480      	push	{r7}
 800021a:	b089      	sub	sp, #36	@ 0x24
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	unsigned i, j, k;
	uint8_t tempa[4]; // Used for the column/row operations

	// The first round key is the key itself.
	for (i = 0; i < Nk; ++i)
 8000222:	2300      	movs	r3, #0
 8000224:	61fb      	str	r3, [r7, #28]
 8000226:	e030      	b.n	800028a <KeyExpansion+0x72>
	{
		RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8000228:	69fb      	ldr	r3, [r7, #28]
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	683a      	ldr	r2, [r7, #0]
 800022e:	441a      	add	r2, r3
 8000230:	69fb      	ldr	r3, [r7, #28]
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	440b      	add	r3, r1
 8000238:	7812      	ldrb	r2, [r2, #0]
 800023a:	701a      	strb	r2, [r3, #0]
		RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 800023c:	69fb      	ldr	r3, [r7, #28]
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	3301      	adds	r3, #1
 8000242:	683a      	ldr	r2, [r7, #0]
 8000244:	441a      	add	r2, r3
 8000246:	69fb      	ldr	r3, [r7, #28]
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	3301      	adds	r3, #1
 800024c:	6879      	ldr	r1, [r7, #4]
 800024e:	440b      	add	r3, r1
 8000250:	7812      	ldrb	r2, [r2, #0]
 8000252:	701a      	strb	r2, [r3, #0]
		RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8000254:	69fb      	ldr	r3, [r7, #28]
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	3302      	adds	r3, #2
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	441a      	add	r2, r3
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	3302      	adds	r3, #2
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	440b      	add	r3, r1
 8000268:	7812      	ldrb	r2, [r2, #0]
 800026a:	701a      	strb	r2, [r3, #0]
		RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 800026c:	69fb      	ldr	r3, [r7, #28]
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	3303      	adds	r3, #3
 8000272:	683a      	ldr	r2, [r7, #0]
 8000274:	441a      	add	r2, r3
 8000276:	69fb      	ldr	r3, [r7, #28]
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	3303      	adds	r3, #3
 800027c:	6879      	ldr	r1, [r7, #4]
 800027e:	440b      	add	r3, r1
 8000280:	7812      	ldrb	r2, [r2, #0]
 8000282:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < Nk; ++i)
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	3301      	adds	r3, #1
 8000288:	61fb      	str	r3, [r7, #28]
 800028a:	69fb      	ldr	r3, [r7, #28]
 800028c:	2b03      	cmp	r3, #3
 800028e:	d9cb      	bls.n	8000228 <KeyExpansion+0x10>
	}

	// All other round keys are found from the previous round keys.
	for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000290:	2304      	movs	r3, #4
 8000292:	61fb      	str	r3, [r7, #28]
 8000294:	e081      	b.n	800039a <KeyExpansion+0x182>
	{
		{
			k = (i - 1) * 4;
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3b01      	subs	r3, #1
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
			tempa[0] = RoundKey[k + 0];
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	69bb      	ldr	r3, [r7, #24]
 80002a2:	4413      	add	r3, r2
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	733b      	strb	r3, [r7, #12]
			tempa[1] = RoundKey[k + 1];
 80002a8:	69bb      	ldr	r3, [r7, #24]
 80002aa:	3301      	adds	r3, #1
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4413      	add	r3, r2
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	737b      	strb	r3, [r7, #13]
			tempa[2] = RoundKey[k + 2];
 80002b4:	69bb      	ldr	r3, [r7, #24]
 80002b6:	3302      	adds	r3, #2
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	4413      	add	r3, r2
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	73bb      	strb	r3, [r7, #14]
			tempa[3] = RoundKey[k + 3];
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	3303      	adds	r3, #3
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	73fb      	strb	r3, [r7, #15]
		}

		if (i % Nk == 0)
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	f003 0303 	and.w	r3, r3, #3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d125      	bne.n	8000322 <KeyExpansion+0x10a>
			// This function shifts the 4 bytes in a word to the left once.
			// [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

			// Function RotWord()
			{
				const uint8_t u8tmp = tempa[0];
 80002d6:	7b3b      	ldrb	r3, [r7, #12]
 80002d8:	75fb      	strb	r3, [r7, #23]
				tempa[0] = tempa[1];
 80002da:	7b7b      	ldrb	r3, [r7, #13]
 80002dc:	733b      	strb	r3, [r7, #12]
				tempa[1] = tempa[2];
 80002de:	7bbb      	ldrb	r3, [r7, #14]
 80002e0:	737b      	strb	r3, [r7, #13]
				tempa[2] = tempa[3];
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	73bb      	strb	r3, [r7, #14]
				tempa[3] = u8tmp;
 80002e6:	7dfb      	ldrb	r3, [r7, #23]
 80002e8:	73fb      	strb	r3, [r7, #15]
			// SubWord() is a function that takes a four-byte input word and
			// applies the S-box to each of the four bytes to produce an output word.

			// Function Subword()
			{
				tempa[0] = getSBoxValue(tempa[0]);
 80002ea:	7b3b      	ldrb	r3, [r7, #12]
 80002ec:	461a      	mov	r2, r3
 80002ee:	4b30      	ldr	r3, [pc, #192]	@ (80003b0 <KeyExpansion+0x198>)
 80002f0:	5c9b      	ldrb	r3, [r3, r2]
 80002f2:	733b      	strb	r3, [r7, #12]
				tempa[1] = getSBoxValue(tempa[1]);
 80002f4:	7b7b      	ldrb	r3, [r7, #13]
 80002f6:	461a      	mov	r2, r3
 80002f8:	4b2d      	ldr	r3, [pc, #180]	@ (80003b0 <KeyExpansion+0x198>)
 80002fa:	5c9b      	ldrb	r3, [r3, r2]
 80002fc:	737b      	strb	r3, [r7, #13]
				tempa[2] = getSBoxValue(tempa[2]);
 80002fe:	7bbb      	ldrb	r3, [r7, #14]
 8000300:	461a      	mov	r2, r3
 8000302:	4b2b      	ldr	r3, [pc, #172]	@ (80003b0 <KeyExpansion+0x198>)
 8000304:	5c9b      	ldrb	r3, [r3, r2]
 8000306:	73bb      	strb	r3, [r7, #14]
				tempa[3] = getSBoxValue(tempa[3]);
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	461a      	mov	r2, r3
 800030c:	4b28      	ldr	r3, [pc, #160]	@ (80003b0 <KeyExpansion+0x198>)
 800030e:	5c9b      	ldrb	r3, [r3, r2]
 8000310:	73fb      	strb	r3, [r7, #15]
			}

			tempa[0] = tempa[0] ^ Rcon[i / Nk];
 8000312:	7b3a      	ldrb	r2, [r7, #12]
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	089b      	lsrs	r3, r3, #2
 8000318:	4926      	ldr	r1, [pc, #152]	@ (80003b4 <KeyExpansion+0x19c>)
 800031a:	5ccb      	ldrb	r3, [r1, r3]
 800031c:	4053      	eors	r3, r2
 800031e:	b2db      	uxtb	r3, r3
 8000320:	733b      	strb	r3, [r7, #12]
				tempa[2] = getSBoxValue(tempa[2]);
				tempa[3] = getSBoxValue(tempa[3]);
			}
		}
#endif
		j = i * 4;
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	613b      	str	r3, [r7, #16]
		k = (i - Nk) * 4;
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	3b04      	subs	r3, #4
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	61bb      	str	r3, [r7, #24]
		RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	69bb      	ldr	r3, [r7, #24]
 8000334:	4413      	add	r3, r2
 8000336:	7819      	ldrb	r1, [r3, #0]
 8000338:	7b3a      	ldrb	r2, [r7, #12]
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	4403      	add	r3, r0
 8000340:	404a      	eors	r2, r1
 8000342:	b2d2      	uxtb	r2, r2
 8000344:	701a      	strb	r2, [r3, #0]
		RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8000346:	69bb      	ldr	r3, [r7, #24]
 8000348:	3301      	adds	r3, #1
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	7819      	ldrb	r1, [r3, #0]
 8000350:	7b7a      	ldrb	r2, [r7, #13]
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	3301      	adds	r3, #1
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	4403      	add	r3, r0
 800035a:	404a      	eors	r2, r1
 800035c:	b2d2      	uxtb	r2, r2
 800035e:	701a      	strb	r2, [r3, #0]
		RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000360:	69bb      	ldr	r3, [r7, #24]
 8000362:	3302      	adds	r3, #2
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	7819      	ldrb	r1, [r3, #0]
 800036a:	7bba      	ldrb	r2, [r7, #14]
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	3302      	adds	r3, #2
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	4403      	add	r3, r0
 8000374:	404a      	eors	r2, r1
 8000376:	b2d2      	uxtb	r2, r2
 8000378:	701a      	strb	r2, [r3, #0]
		RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 800037a:	69bb      	ldr	r3, [r7, #24]
 800037c:	3303      	adds	r3, #3
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	4413      	add	r3, r2
 8000382:	7819      	ldrb	r1, [r3, #0]
 8000384:	7bfa      	ldrb	r2, [r7, #15]
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	3303      	adds	r3, #3
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	4403      	add	r3, r0
 800038e:	404a      	eors	r2, r1
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	701a      	strb	r2, [r3, #0]
	for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000394:	69fb      	ldr	r3, [r7, #28]
 8000396:	3301      	adds	r3, #1
 8000398:	61fb      	str	r3, [r7, #28]
 800039a:	69fb      	ldr	r3, [r7, #28]
 800039c:	2b2b      	cmp	r3, #43	@ 0x2b
 800039e:	f67f af7a 	bls.w	8000296 <KeyExpansion+0x7e>
	}
}
 80003a2:	bf00      	nop
 80003a4:	bf00      	nop
 80003a6:	3724      	adds	r7, #36	@ 0x24
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	0800401c 	.word	0x0800401c
 80003b4:	0800421c 	.word	0x0800421c

080003b8 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx *ctx, const uint8_t *key)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	KeyExpansion(ctx->RoundKey, key);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6839      	ldr	r1, [r7, #0]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff26 	bl	8000218 <KeyExpansion>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t *state, const uint8_t *RoundKey)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b087      	sub	sp, #28
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
 80003e0:	73fb      	strb	r3, [r7, #15]
	uint8_t i, j;
	for (i = 0; i < 4; ++i)
 80003e2:	2300      	movs	r3, #0
 80003e4:	75fb      	strb	r3, [r7, #23]
 80003e6:	e027      	b.n	8000438 <AddRoundKey+0x64>
	{
		for (j = 0; j < 4; ++j)
 80003e8:	2300      	movs	r3, #0
 80003ea:	75bb      	strb	r3, [r7, #22]
 80003ec:	e01e      	b.n	800042c <AddRoundKey+0x58>
		{
			(*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 80003ee:	7dfa      	ldrb	r2, [r7, #23]
 80003f0:	7dbb      	ldrb	r3, [r7, #22]
 80003f2:	68b9      	ldr	r1, [r7, #8]
 80003f4:	0092      	lsls	r2, r2, #2
 80003f6:	440a      	add	r2, r1
 80003f8:	4413      	add	r3, r2
 80003fa:	7818      	ldrb	r0, [r3, #0]
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	009a      	lsls	r2, r3, #2
 8000400:	7dfb      	ldrb	r3, [r7, #23]
 8000402:	4413      	add	r3, r2
 8000404:	009a      	lsls	r2, r3, #2
 8000406:	7dbb      	ldrb	r3, [r7, #22]
 8000408:	4413      	add	r3, r2
 800040a:	461a      	mov	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4413      	add	r3, r2
 8000410:	7819      	ldrb	r1, [r3, #0]
 8000412:	7dfa      	ldrb	r2, [r7, #23]
 8000414:	7dbb      	ldrb	r3, [r7, #22]
 8000416:	4041      	eors	r1, r0
 8000418:	b2c8      	uxtb	r0, r1
 800041a:	68b9      	ldr	r1, [r7, #8]
 800041c:	0092      	lsls	r2, r2, #2
 800041e:	440a      	add	r2, r1
 8000420:	4413      	add	r3, r2
 8000422:	4602      	mov	r2, r0
 8000424:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 4; ++j)
 8000426:	7dbb      	ldrb	r3, [r7, #22]
 8000428:	3301      	adds	r3, #1
 800042a:	75bb      	strb	r3, [r7, #22]
 800042c:	7dbb      	ldrb	r3, [r7, #22]
 800042e:	2b03      	cmp	r3, #3
 8000430:	d9dd      	bls.n	80003ee <AddRoundKey+0x1a>
	for (i = 0; i < 4; ++i)
 8000432:	7dfb      	ldrb	r3, [r7, #23]
 8000434:	3301      	adds	r3, #1
 8000436:	75fb      	strb	r3, [r7, #23]
 8000438:	7dfb      	ldrb	r3, [r7, #23]
 800043a:	2b03      	cmp	r3, #3
 800043c:	d9d4      	bls.n	80003e8 <AddRoundKey+0x14>
		}
	}
}
 800043e:	bf00      	nop
 8000440:	bf00      	nop
 8000442:	371c      	adds	r7, #28
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <xtime>:
	(*state)[2][3] = (*state)[1][3];
	(*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
	return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	b25a      	sxtb	r2, r3
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	09db      	lsrs	r3, r3, #7
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4619      	mov	r1, r3
 8000464:	0049      	lsls	r1, r1, #1
 8000466:	440b      	add	r3, r1
 8000468:	4619      	mov	r1, r3
 800046a:	00c8      	lsls	r0, r1, #3
 800046c:	4619      	mov	r1, r3
 800046e:	4603      	mov	r3, r0
 8000470:	440b      	add	r3, r1
 8000472:	b2db      	uxtb	r3, r3
 8000474:	b25b      	sxtb	r3, r3
 8000476:	4053      	eors	r3, r2
 8000478:	b25b      	sxtb	r3, r3
 800047a:	b2db      	uxtb	r3, r3
}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t *state)
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	int i;
	uint8_t a, b, c, d;
	for (i = 0; i < 4; ++i)
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	e33b      	b.n	8000b0e <InvMixColumns+0x686>
	{
		a = (*state)[i][0];
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800049e:	72fb      	strb	r3, [r7, #11]
		b = (*state)[i][1];
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	4413      	add	r3, r2
 80004a8:	785b      	ldrb	r3, [r3, #1]
 80004aa:	72bb      	strb	r3, [r7, #10]
		c = (*state)[i][2];
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	4413      	add	r3, r2
 80004b4:	789b      	ldrb	r3, [r3, #2]
 80004b6:	727b      	strb	r3, [r7, #9]
		d = (*state)[i][3];
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	4413      	add	r3, r2
 80004c0:	78db      	ldrb	r3, [r3, #3]
 80004c2:	723b      	strb	r3, [r7, #8]

		(*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 80004c4:	7afb      	ldrb	r3, [r7, #11]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ffc0 	bl	800044c <xtime>
 80004cc:	4603      	mov	r3, r0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ffbc 	bl	800044c <xtime>
 80004d4:	4603      	mov	r3, r0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ffb8 	bl	800044c <xtime>
 80004dc:	4603      	mov	r3, r0
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ffb4 	bl	800044c <xtime>
 80004e4:	7abb      	ldrb	r3, [r7, #10]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ffb0 	bl	800044c <xtime>
 80004ec:	4603      	mov	r3, r0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ffac 	bl	800044c <xtime>
 80004f4:	7abb      	ldrb	r3, [r7, #10]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ffa8 	bl	800044c <xtime>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ffa4 	bl	800044c <xtime>
 8000504:	4603      	mov	r3, r0
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ffa0 	bl	800044c <xtime>
 800050c:	4603      	mov	r3, r0
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff9c 	bl	800044c <xtime>
 8000514:	7a7b      	ldrb	r3, [r7, #9]
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff98 	bl	800044c <xtime>
 800051c:	7a7b      	ldrb	r3, [r7, #9]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff94 	bl	800044c <xtime>
 8000524:	4603      	mov	r3, r0
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ff90 	bl	800044c <xtime>
 800052c:	4603      	mov	r3, r0
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ff8c 	bl	800044c <xtime>
 8000534:	4603      	mov	r3, r0
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff88 	bl	800044c <xtime>
 800053c:	7a3b      	ldrb	r3, [r7, #8]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff84 	bl	800044c <xtime>
 8000544:	7a3b      	ldrb	r3, [r7, #8]
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ff80 	bl	800044c <xtime>
 800054c:	4603      	mov	r3, r0
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff7c 	bl	800044c <xtime>
 8000554:	7a3b      	ldrb	r3, [r7, #8]
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ff78 	bl	800044c <xtime>
 800055c:	4603      	mov	r3, r0
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ff74 	bl	800044c <xtime>
 8000564:	4603      	mov	r3, r0
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff70 	bl	800044c <xtime>
 800056c:	4603      	mov	r3, r0
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ff6c 	bl	800044c <xtime>
 8000574:	7afb      	ldrb	r3, [r7, #11]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff68 	bl	800044c <xtime>
 800057c:	4603      	mov	r3, r0
 800057e:	461c      	mov	r4, r3
 8000580:	7afb      	ldrb	r3, [r7, #11]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff62 	bl	800044c <xtime>
 8000588:	4603      	mov	r3, r0
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ff5e 	bl	800044c <xtime>
 8000590:	4603      	mov	r3, r0
 8000592:	4063      	eors	r3, r4
 8000594:	b2dc      	uxtb	r4, r3
 8000596:	7afb      	ldrb	r3, [r7, #11]
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff57 	bl	800044c <xtime>
 800059e:	4603      	mov	r3, r0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ff53 	bl	800044c <xtime>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ff4f 	bl	800044c <xtime>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4063      	eors	r3, r4
 80005b2:	b2dc      	uxtb	r4, r3
 80005b4:	7abb      	ldrb	r3, [r7, #10]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ff48 	bl	800044c <xtime>
 80005bc:	4603      	mov	r3, r0
 80005be:	461a      	mov	r2, r3
 80005c0:	7abb      	ldrb	r3, [r7, #10]
 80005c2:	4053      	eors	r3, r2
 80005c4:	b2dd      	uxtb	r5, r3
 80005c6:	7abb      	ldrb	r3, [r7, #10]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ff3f 	bl	800044c <xtime>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ff3b 	bl	800044c <xtime>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff37 	bl	800044c <xtime>
 80005de:	4603      	mov	r3, r0
 80005e0:	406b      	eors	r3, r5
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	4063      	eors	r3, r4
 80005e6:	b2dc      	uxtb	r4, r3
 80005e8:	7a7b      	ldrb	r3, [r7, #9]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff2e 	bl	800044c <xtime>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff2a 	bl	800044c <xtime>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	7a7b      	ldrb	r3, [r7, #9]
 80005fe:	4053      	eors	r3, r2
 8000600:	b2dd      	uxtb	r5, r3
 8000602:	7a7b      	ldrb	r3, [r7, #9]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff21 	bl	800044c <xtime>
 800060a:	4603      	mov	r3, r0
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ff1d 	bl	800044c <xtime>
 8000612:	4603      	mov	r3, r0
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff19 	bl	800044c <xtime>
 800061a:	4603      	mov	r3, r0
 800061c:	406b      	eors	r3, r5
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4063      	eors	r3, r4
 8000622:	b2dc      	uxtb	r4, r3
 8000624:	7a3b      	ldrb	r3, [r7, #8]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff10 	bl	800044c <xtime>
 800062c:	4603      	mov	r3, r0
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ff0c 	bl	800044c <xtime>
 8000634:	4603      	mov	r3, r0
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff08 	bl	800044c <xtime>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	7a3b      	ldrb	r3, [r7, #8]
 8000642:	4053      	eors	r3, r2
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4063      	eors	r3, r4
 8000648:	b2d9      	uxtb	r1, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		(*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8000652:	7afb      	ldrb	r3, [r7, #11]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fef9 	bl	800044c <xtime>
 800065a:	7afb      	ldrb	r3, [r7, #11]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fef5 	bl	800044c <xtime>
 8000662:	4603      	mov	r3, r0
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fef1 	bl	800044c <xtime>
 800066a:	7afb      	ldrb	r3, [r7, #11]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff feed 	bl	800044c <xtime>
 8000672:	4603      	mov	r3, r0
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fee9 	bl	800044c <xtime>
 800067a:	4603      	mov	r3, r0
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fee5 	bl	800044c <xtime>
 8000682:	4603      	mov	r3, r0
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fee1 	bl	800044c <xtime>
 800068a:	7abb      	ldrb	r3, [r7, #10]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fedd 	bl	800044c <xtime>
 8000692:	4603      	mov	r3, r0
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fed9 	bl	800044c <xtime>
 800069a:	4603      	mov	r3, r0
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fed5 	bl	800044c <xtime>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fed1 	bl	800044c <xtime>
 80006aa:	7a7b      	ldrb	r3, [r7, #9]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fecd 	bl	800044c <xtime>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fec9 	bl	800044c <xtime>
 80006ba:	7a7b      	ldrb	r3, [r7, #9]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fec5 	bl	800044c <xtime>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fec1 	bl	800044c <xtime>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff febd 	bl	800044c <xtime>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff feb9 	bl	800044c <xtime>
 80006da:	7a3b      	ldrb	r3, [r7, #8]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff feb5 	bl	800044c <xtime>
 80006e2:	7a3b      	ldrb	r3, [r7, #8]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff feb1 	bl	800044c <xtime>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fead 	bl	800044c <xtime>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fea9 	bl	800044c <xtime>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fea5 	bl	800044c <xtime>
 8000702:	7afb      	ldrb	r3, [r7, #11]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fea1 	bl	800044c <xtime>
 800070a:	4603      	mov	r3, r0
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fe9d 	bl	800044c <xtime>
 8000712:	4603      	mov	r3, r0
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fe99 	bl	800044c <xtime>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	7afb      	ldrb	r3, [r7, #11]
 8000720:	4053      	eors	r3, r2
 8000722:	b2dc      	uxtb	r4, r3
 8000724:	7abb      	ldrb	r3, [r7, #10]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fe90 	bl	800044c <xtime>
 800072c:	4603      	mov	r3, r0
 800072e:	461d      	mov	r5, r3
 8000730:	7abb      	ldrb	r3, [r7, #10]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fe8a 	bl	800044c <xtime>
 8000738:	4603      	mov	r3, r0
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fe86 	bl	800044c <xtime>
 8000740:	4603      	mov	r3, r0
 8000742:	406b      	eors	r3, r5
 8000744:	b2dd      	uxtb	r5, r3
 8000746:	7abb      	ldrb	r3, [r7, #10]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fe7f 	bl	800044c <xtime>
 800074e:	4603      	mov	r3, r0
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fe7b 	bl	800044c <xtime>
 8000756:	4603      	mov	r3, r0
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fe77 	bl	800044c <xtime>
 800075e:	4603      	mov	r3, r0
 8000760:	406b      	eors	r3, r5
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4063      	eors	r3, r4
 8000766:	b2dc      	uxtb	r4, r3
 8000768:	7a7b      	ldrb	r3, [r7, #9]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fe6e 	bl	800044c <xtime>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	7a7b      	ldrb	r3, [r7, #9]
 8000776:	4053      	eors	r3, r2
 8000778:	b2dd      	uxtb	r5, r3
 800077a:	7a7b      	ldrb	r3, [r7, #9]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fe65 	bl	800044c <xtime>
 8000782:	4603      	mov	r3, r0
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fe61 	bl	800044c <xtime>
 800078a:	4603      	mov	r3, r0
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fe5d 	bl	800044c <xtime>
 8000792:	4603      	mov	r3, r0
 8000794:	406b      	eors	r3, r5
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4063      	eors	r3, r4
 800079a:	b2dc      	uxtb	r4, r3
 800079c:	7a3b      	ldrb	r3, [r7, #8]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fe54 	bl	800044c <xtime>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe50 	bl	800044c <xtime>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	7a3b      	ldrb	r3, [r7, #8]
 80007b2:	4053      	eors	r3, r2
 80007b4:	b2dd      	uxtb	r5, r3
 80007b6:	7a3b      	ldrb	r3, [r7, #8]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fe47 	bl	800044c <xtime>
 80007be:	4603      	mov	r3, r0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe43 	bl	800044c <xtime>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fe3f 	bl	800044c <xtime>
 80007ce:	4603      	mov	r3, r0
 80007d0:	406b      	eors	r3, r5
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4063      	eors	r3, r4
 80007d6:	b2d9      	uxtb	r1, r3
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	460a      	mov	r2, r1
 80007e2:	705a      	strb	r2, [r3, #1]
		(*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 80007e4:	7afb      	ldrb	r3, [r7, #11]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fe30 	bl	800044c <xtime>
 80007ec:	7afb      	ldrb	r3, [r7, #11]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fe2c 	bl	800044c <xtime>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fe28 	bl	800044c <xtime>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fe24 	bl	800044c <xtime>
 8000804:	4603      	mov	r3, r0
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fe20 	bl	800044c <xtime>
 800080c:	7abb      	ldrb	r3, [r7, #10]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fe1c 	bl	800044c <xtime>
 8000814:	7abb      	ldrb	r3, [r7, #10]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe18 	bl	800044c <xtime>
 800081c:	4603      	mov	r3, r0
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fe14 	bl	800044c <xtime>
 8000824:	7abb      	ldrb	r3, [r7, #10]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fe10 	bl	800044c <xtime>
 800082c:	4603      	mov	r3, r0
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff fe0c 	bl	800044c <xtime>
 8000834:	4603      	mov	r3, r0
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fe08 	bl	800044c <xtime>
 800083c:	4603      	mov	r3, r0
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fe04 	bl	800044c <xtime>
 8000844:	7a7b      	ldrb	r3, [r7, #9]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fe00 	bl	800044c <xtime>
 800084c:	4603      	mov	r3, r0
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fdfc 	bl	800044c <xtime>
 8000854:	4603      	mov	r3, r0
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fdf8 	bl	800044c <xtime>
 800085c:	4603      	mov	r3, r0
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fdf4 	bl	800044c <xtime>
 8000864:	7a3b      	ldrb	r3, [r7, #8]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fdf0 	bl	800044c <xtime>
 800086c:	4603      	mov	r3, r0
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fdec 	bl	800044c <xtime>
 8000874:	7a3b      	ldrb	r3, [r7, #8]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fde8 	bl	800044c <xtime>
 800087c:	4603      	mov	r3, r0
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fde4 	bl	800044c <xtime>
 8000884:	4603      	mov	r3, r0
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fde0 	bl	800044c <xtime>
 800088c:	4603      	mov	r3, r0
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fddc 	bl	800044c <xtime>
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fdd8 	bl	800044c <xtime>
 800089c:	4603      	mov	r3, r0
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fdd4 	bl	800044c <xtime>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	7afb      	ldrb	r3, [r7, #11]
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2dc      	uxtb	r4, r3
 80008ae:	7afb      	ldrb	r3, [r7, #11]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fdcb 	bl	800044c <xtime>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fdc7 	bl	800044c <xtime>
 80008be:	4603      	mov	r3, r0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fdc3 	bl	800044c <xtime>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4063      	eors	r3, r4
 80008ca:	b2dc      	uxtb	r4, r3
 80008cc:	7abb      	ldrb	r3, [r7, #10]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fdbc 	bl	800044c <xtime>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fdb8 	bl	800044c <xtime>
 80008dc:	4603      	mov	r3, r0
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fdb4 	bl	800044c <xtime>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	4053      	eors	r3, r2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4063      	eors	r3, r4
 80008f0:	b2dc      	uxtb	r4, r3
 80008f2:	7a7b      	ldrb	r3, [r7, #9]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fda9 	bl	800044c <xtime>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461d      	mov	r5, r3
 80008fe:	7a7b      	ldrb	r3, [r7, #9]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fda3 	bl	800044c <xtime>
 8000906:	4603      	mov	r3, r0
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fd9f 	bl	800044c <xtime>
 800090e:	4603      	mov	r3, r0
 8000910:	406b      	eors	r3, r5
 8000912:	b2dd      	uxtb	r5, r3
 8000914:	7a7b      	ldrb	r3, [r7, #9]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fd98 	bl	800044c <xtime>
 800091c:	4603      	mov	r3, r0
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fd94 	bl	800044c <xtime>
 8000924:	4603      	mov	r3, r0
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fd90 	bl	800044c <xtime>
 800092c:	4603      	mov	r3, r0
 800092e:	406b      	eors	r3, r5
 8000930:	b2db      	uxtb	r3, r3
 8000932:	4063      	eors	r3, r4
 8000934:	b2dc      	uxtb	r4, r3
 8000936:	7a3b      	ldrb	r3, [r7, #8]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fd87 	bl	800044c <xtime>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	7a3b      	ldrb	r3, [r7, #8]
 8000944:	4053      	eors	r3, r2
 8000946:	b2dd      	uxtb	r5, r3
 8000948:	7a3b      	ldrb	r3, [r7, #8]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fd7e 	bl	800044c <xtime>
 8000950:	4603      	mov	r3, r0
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fd7a 	bl	800044c <xtime>
 8000958:	4603      	mov	r3, r0
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fd76 	bl	800044c <xtime>
 8000960:	4603      	mov	r3, r0
 8000962:	406b      	eors	r3, r5
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4063      	eors	r3, r4
 8000968:	b2d9      	uxtb	r1, r3
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	460a      	mov	r2, r1
 8000974:	709a      	strb	r2, [r3, #2]
		(*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8000976:	7afb      	ldrb	r3, [r7, #11]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fd67 	bl	800044c <xtime>
 800097e:	4603      	mov	r3, r0
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fd63 	bl	800044c <xtime>
 8000986:	7afb      	ldrb	r3, [r7, #11]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fd5f 	bl	800044c <xtime>
 800098e:	4603      	mov	r3, r0
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fd5b 	bl	800044c <xtime>
 8000996:	4603      	mov	r3, r0
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fd57 	bl	800044c <xtime>
 800099e:	4603      	mov	r3, r0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fd53 	bl	800044c <xtime>
 80009a6:	7abb      	ldrb	r3, [r7, #10]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fd4f 	bl	800044c <xtime>
 80009ae:	7abb      	ldrb	r3, [r7, #10]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fd4b 	bl	800044c <xtime>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fd47 	bl	800044c <xtime>
 80009be:	4603      	mov	r3, r0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fd43 	bl	800044c <xtime>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd3f 	bl	800044c <xtime>
 80009ce:	7a7b      	ldrb	r3, [r7, #9]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fd3b 	bl	800044c <xtime>
 80009d6:	7a7b      	ldrb	r3, [r7, #9]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fd37 	bl	800044c <xtime>
 80009de:	4603      	mov	r3, r0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fd33 	bl	800044c <xtime>
 80009e6:	7a7b      	ldrb	r3, [r7, #9]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fd2f 	bl	800044c <xtime>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fd2b 	bl	800044c <xtime>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fd27 	bl	800044c <xtime>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fd23 	bl	800044c <xtime>
 8000a06:	7a3b      	ldrb	r3, [r7, #8]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fd1f 	bl	800044c <xtime>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fd1b 	bl	800044c <xtime>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fd17 	bl	800044c <xtime>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fd13 	bl	800044c <xtime>
 8000a26:	7afb      	ldrb	r3, [r7, #11]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fd0f 	bl	800044c <xtime>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	7afb      	ldrb	r3, [r7, #11]
 8000a34:	4053      	eors	r3, r2
 8000a36:	b2dc      	uxtb	r4, r3
 8000a38:	7afb      	ldrb	r3, [r7, #11]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fd06 	bl	800044c <xtime>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fd02 	bl	800044c <xtime>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fcfe 	bl	800044c <xtime>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4063      	eors	r3, r4
 8000a54:	b2dc      	uxtb	r4, r3
 8000a56:	7abb      	ldrb	r3, [r7, #10]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fcf7 	bl	800044c <xtime>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fcf3 	bl	800044c <xtime>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	7abb      	ldrb	r3, [r7, #10]
 8000a6c:	4053      	eors	r3, r2
 8000a6e:	b2dd      	uxtb	r5, r3
 8000a70:	7abb      	ldrb	r3, [r7, #10]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fcea 	bl	800044c <xtime>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fce6 	bl	800044c <xtime>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fce2 	bl	800044c <xtime>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	406b      	eors	r3, r5
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4063      	eors	r3, r4
 8000a90:	b2dc      	uxtb	r4, r3
 8000a92:	7a7b      	ldrb	r3, [r7, #9]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fcd9 	bl	800044c <xtime>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fcd5 	bl	800044c <xtime>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fcd1 	bl	800044c <xtime>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	7a7b      	ldrb	r3, [r7, #9]
 8000ab0:	4053      	eors	r3, r2
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4063      	eors	r3, r4
 8000ab6:	b2dc      	uxtb	r4, r3
 8000ab8:	7a3b      	ldrb	r3, [r7, #8]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fcc6 	bl	800044c <xtime>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461d      	mov	r5, r3
 8000ac4:	7a3b      	ldrb	r3, [r7, #8]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fcc0 	bl	800044c <xtime>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fcbc 	bl	800044c <xtime>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	406b      	eors	r3, r5
 8000ad8:	b2dd      	uxtb	r5, r3
 8000ada:	7a3b      	ldrb	r3, [r7, #8]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fcb5 	bl	800044c <xtime>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fcb1 	bl	800044c <xtime>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fcad 	bl	800044c <xtime>
 8000af2:	4603      	mov	r3, r0
 8000af4:	406b      	eors	r3, r5
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4063      	eors	r3, r4
 8000afa:	b2d9      	uxtb	r1, r3
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	460a      	mov	r2, r1
 8000b06:	70da      	strb	r2, [r3, #3]
	for (i = 0; i < 4; ++i)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	f77f acc0 	ble.w	8000496 <InvMixColumns+0xe>
	}
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bdb0      	pop	{r4, r5, r7, pc}

08000b20 <InvSubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t *state)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	uint8_t i, j;
	for (i = 0; i < 4; ++i)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e01d      	b.n	8000b6a <InvSubBytes+0x4a>
	{
		for (j = 0; j < 4; ++j)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73bb      	strb	r3, [r7, #14]
 8000b32:	e014      	b.n	8000b5e <InvSubBytes+0x3e>
		{
			(*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8000b34:	7bba      	ldrb	r2, [r7, #14]
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	0092      	lsls	r2, r2, #2
 8000b3c:	440a      	add	r2, r1
 8000b3e:	4413      	add	r3, r2
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	7bba      	ldrb	r2, [r7, #14]
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	490d      	ldr	r1, [pc, #52]	@ (8000b80 <InvSubBytes+0x60>)
 8000b4a:	5c08      	ldrb	r0, [r1, r0]
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	440a      	add	r2, r1
 8000b52:	4413      	add	r3, r2
 8000b54:	4602      	mov	r2, r0
 8000b56:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 4; ++j)
 8000b58:	7bbb      	ldrb	r3, [r7, #14]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	73bb      	strb	r3, [r7, #14]
 8000b5e:	7bbb      	ldrb	r3, [r7, #14]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d9e7      	bls.n	8000b34 <InvSubBytes+0x14>
	for (i = 0; i < 4; ++i)
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	3301      	adds	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d9de      	bls.n	8000b2e <InvSubBytes+0xe>
		}
	}
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	0800411c 	.word	0x0800411c

08000b84 <InvShiftRows>:

static void InvShiftRows(state_t *state)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	// Rotate first row 1 columns to right
	temp = (*state)[3][1];
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7b5b      	ldrb	r3, [r3, #13]
 8000b90:	73fb      	strb	r3, [r7, #15]
	(*state)[3][1] = (*state)[2][1];
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7a5a      	ldrb	r2, [r3, #9]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	735a      	strb	r2, [r3, #13]
	(*state)[2][1] = (*state)[1][1];
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	795a      	ldrb	r2, [r3, #5]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	725a      	strb	r2, [r3, #9]
	(*state)[1][1] = (*state)[0][1];
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	785a      	ldrb	r2, [r3, #1]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	715a      	strb	r2, [r3, #5]
	(*state)[0][1] = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7bfa      	ldrb	r2, [r7, #15]
 8000bae:	705a      	strb	r2, [r3, #1]

	// Rotate second row 2 columns to right
	temp = (*state)[0][2];
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	789b      	ldrb	r3, [r3, #2]
 8000bb4:	73fb      	strb	r3, [r7, #15]
	(*state)[0][2] = (*state)[2][2];
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7a9a      	ldrb	r2, [r3, #10]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	709a      	strb	r2, [r3, #2]
	(*state)[2][2] = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7bfa      	ldrb	r2, [r7, #15]
 8000bc2:	729a      	strb	r2, [r3, #10]

	temp = (*state)[1][2];
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	799b      	ldrb	r3, [r3, #6]
 8000bc8:	73fb      	strb	r3, [r7, #15]
	(*state)[1][2] = (*state)[3][2];
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7b9a      	ldrb	r2, [r3, #14]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	719a      	strb	r2, [r3, #6]
	(*state)[3][2] = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7bfa      	ldrb	r2, [r7, #15]
 8000bd6:	739a      	strb	r2, [r3, #14]

	// Rotate third row 3 columns to right
	temp = (*state)[0][3];
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	78db      	ldrb	r3, [r3, #3]
 8000bdc:	73fb      	strb	r3, [r7, #15]
	(*state)[0][3] = (*state)[1][3];
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	79da      	ldrb	r2, [r3, #7]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	70da      	strb	r2, [r3, #3]
	(*state)[1][3] = (*state)[2][3];
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7ada      	ldrb	r2, [r3, #11]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	71da      	strb	r2, [r3, #7]
	(*state)[2][3] = (*state)[3][3];
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7bda      	ldrb	r2, [r3, #15]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	72da      	strb	r2, [r3, #11]
	(*state)[3][3] = temp;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7bfa      	ldrb	r2, [r7, #15]
 8000bfa:	73da      	strb	r2, [r3, #15]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <InvCipher>:
	AddRoundKey(Nr, state, RoundKey);
}

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t *state, const uint8_t *RoundKey)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	uint8_t round = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]

	// Add the First round key to the state before starting the rounds.
	AddRoundKey(Nr, state, RoundKey);
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f7ff fbda 	bl	80003d4 <AddRoundKey>

	// There will be Nr rounds.
	// The first Nr-1 rounds are identical.
	// These Nr rounds are executed in the loop below.
	// Last one without InvMixColumn()
	for (round = (Nr - 1);; --round)
 8000c20:	2309      	movs	r3, #9
 8000c22:	73fb      	strb	r3, [r7, #15]
	{
		InvShiftRows(state);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ffad 	bl	8000b84 <InvShiftRows>
		InvSubBytes(state);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ff78 	bl	8000b20 <InvSubBytes>
		AddRoundKey(round, state, RoundKey);
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fbcc 	bl	80003d4 <AddRoundKey>
		if (round == 0)
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d006      	beq.n	8000c50 <InvCipher+0x48>
		{
			break;
		}
		InvMixColumns(state);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fc20 	bl	8000488 <InvMixColumns>
	for (round = (Nr - 1);; --round)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
		InvShiftRows(state);
 8000c4e:	e7e9      	b.n	8000c24 <InvCipher+0x1c>
			break;
 8000c50:	bf00      	nop
	}
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <AES_ECB_decrypt>:
	// The next function call encrypts the PlainText with the Key using AES algorithm.
	Cipher((state_t *)buf, ctx->RoundKey);
}

void AES_ECB_decrypt(const struct AES_ctx *ctx, uint8_t *buf)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
	// The next function call decrypts the PlainText with the Key using AES algorithm.
	InvCipher((state_t *)buf, ctx->RoundKey);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4619      	mov	r1, r3
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f7ff ffcd 	bl	8000c08 <InvCipher>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <backup_reg_write>:
#include "backup_reg.h"

void backup_reg_write(uint32_t data, volatile uint32_t *backupReg)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;  // Enable power interface clock
 8000c82:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <backup_reg_write+0x4c>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c86:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <backup_reg_write+0x4c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	6593      	str	r3, [r2, #88]	@ 0x58
	PWR->CR1 |= PWR_CR1_DBP;			  // Enable access to the backup domain
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <backup_reg_write+0x50>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <backup_reg_write+0x50>)
 8000c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c98:	6013      	str	r3, [r2, #0]
	*backupReg = data;					  // Write data to backup register
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	601a      	str	r2, [r3, #0]
	PWR->CR1 &= ~PWR_CR1_DBP;			  // Disable access to the backup domain
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <backup_reg_write+0x50>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <backup_reg_write+0x50>)
 8000ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000caa:	6013      	str	r3, [r2, #0]
	RCC->APB1ENR1 &= ~RCC_APB1ENR1_PWREN; // Disable power interface clock
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <backup_reg_write+0x4c>)
 8000cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb0:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <backup_reg_write+0x4c>)
 8000cb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40007000 	.word	0x40007000

08000ccc <backup_reg_read>:
uint32_t backup_reg_read(volatile uint32_t *backupReg)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	return *backupReg; 
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <bootloader>:

void JumpToApplication(void);

#define WAIT_COUNTER_INIT 1000000
void bootloader(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b09c      	sub	sp, #112	@ 0x70
 8000ce8:	af00      	add	r7, sp, #0
	// Смотрим наличие команды на работу бутлоадера в бекап регистре
	uint32_t bootloaderStatus = backup_reg_read(&TAMP->BKP1R);
 8000cea:	4875      	ldr	r0, [pc, #468]	@ (8000ec0 <bootloader+0x1dc>)
 8000cec:	f7ff ffee 	bl	8000ccc <backup_reg_read>
 8000cf0:	65b8      	str	r0, [r7, #88]	@ 0x58
	if (bootloaderStatus == CMD_BOOTLOAD)
 8000cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f040 80dd 	bne.w	8000eb4 <bootloader+0x1d0>
	{
		uint32_t currentProgramAppAddr = STD_APP_ADDR;
 8000cfa:	4b72      	ldr	r3, [pc, #456]	@ (8000ec4 <bootloader+0x1e0>)
 8000cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
		MX_FDCAN1_Init();
 8000cfe:	f000 fb4f 	bl	80013a0 <MX_FDCAN1_Init>
		FDCAN1_FilterSet(SDO_TX, 0x7FFU);
 8000d02:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000d06:	f240 6002 	movw	r0, #1538	@ 0x602
 8000d0a:	f000 facd 	bl	80012a8 <FDCAN1_FilterSet>
		HAL_FDCAN_Start(&hfdcan1);
 8000d0e:	486e      	ldr	r0, [pc, #440]	@ (8000ec8 <bootloader+0x1e4>)
 8000d10:	f001 f8dd 	bl	8001ece <HAL_FDCAN_Start>
		// Отправляем подтверждение: cansend vcan0 582# 60 51 1F 01
		// FDCAN1_TransmitMessage(SDO_RX, rebootResponse, 4);
		// Ожидаем инициализацию сегментированной передачи
		uint32_t wait_counter = WAIT_COUNTER_INIT;
 8000d14:	4b6d      	ldr	r3, [pc, #436]	@ (8000ecc <bootloader+0x1e8>)
 8000d16:	657b      	str	r3, [r7, #84]	@ 0x54
		uint8_t RxData[8] = {0};
 8000d18:	2300      	movs	r3, #0
 8000d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	653b      	str	r3, [r7, #80]	@ 0x50
		uint32_t RxDataLen = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	64bb      	str	r3, [r7, #72]	@ 0x48
		while (wait_counter)
 8000d24:	e00a      	b.n	8000d3c <bootloader+0x58>
		{
			FDCAN1_ReceiveMessage(RxData, &RxDataLen);
 8000d26:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000d2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fae9 	bl	8001308 <FDCAN1_ReceiveMessage>
			if (RxDataLen != 0)
 8000d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d103      	bne.n	8000d44 <bootloader+0x60>
		while (wait_counter)
 8000d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f1      	bne.n	8000d26 <bootloader+0x42>
 8000d42:	e000      	b.n	8000d46 <bootloader+0x62>
			{
				break;
 8000d44:	bf00      	nop
			}
			// wait_counter--;
		}
		uint32_t AppSize = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	66bb      	str	r3, [r7, #104]	@ 0x68
		for (int i = 4; i < 8; i++)
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8000d4e:	e011      	b.n	8000d74 <bootloader+0x90>
		{
			AppSize |= (uint32_t)(RxData[i] << 8 * (i-4));
 8000d50:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d56:	4413      	add	r3, r2
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
		for (int i = 4; i < 8; i++)
 8000d6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d70:	3301      	adds	r3, #1
 8000d72:	667b      	str	r3, [r7, #100]	@ 0x64
 8000d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	ddea      	ble.n	8000d50 <bootloader+0x6c>
		}
		// Стираем пользовательскую прошивку
		FLASH_EraseInitTypeDef eraseInitStruct;
		uint32_t sectorError;
		eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
		eraseInitStruct.Page = 32;			// Начальная страница для стирания
 8000d7e:	2320      	movs	r3, #32
 8000d80:	643b      	str	r3, [r7, #64]	@ 0x40
		eraseInitStruct.NbPages = 128 - 32; // Количество страниц
 8000d82:	2360      	movs	r3, #96	@ 0x60
 8000d84:	647b      	str	r3, [r7, #68]	@ 0x44
		HAL_FLASH_Unlock();
 8000d86:	f001 fb89 	bl	800249c <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError);
 8000d8a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000d8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 fc6b 	bl	8002670 <HAL_FLASHEx_Erase>
		HAL_FLASH_Lock();
 8000d9a:	f001 fba1 	bl	80024e0 <HAL_FLASH_Lock>
		// Отправляем подтверждение: cansend vcan0 582#60 50 1F 01
		FDCAN1_TransmitMessage(SDO_RX, transmitInitResponse, 4);
 8000d9e:	2204      	movs	r2, #4
 8000da0:	494b      	ldr	r1, [pc, #300]	@ (8000ed0 <bootloader+0x1ec>)
 8000da2:	f240 5082 	movw	r0, #1410	@ 0x582
 8000da6:	f000 fad1 	bl	800134c <FDCAN1_TransmitMessage>
		//////////////////////////////////////////////////
		RingBuff toDecrypt = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2220      	movs	r2, #32
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 f8fb 	bl	8003fac <memset>
		uint64_t isDecripted[2] = {0};
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
		for (int i = 0; i < AppSize+1; i += 7)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8000dc8:	e068      	b.n	8000e9c <bootloader+0x1b8>
		{
			// Ожидаем пакет прошивки
			wait_counter = WAIT_COUNTER_INIT;
 8000dca:	4b40      	ldr	r3, [pc, #256]	@ (8000ecc <bootloader+0x1e8>)
 8000dcc:	657b      	str	r3, [r7, #84]	@ 0x54
			RxDataLen = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
			while (wait_counter)
 8000dd2:	e00a      	b.n	8000dea <bootloader+0x106>
			{
				FDCAN1_ReceiveMessage(RxData, &RxDataLen);
 8000dd4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000dd8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fa92 	bl	8001308 <FDCAN1_ReceiveMessage>
				if (RxDataLen != 0)
 8000de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d103      	bne.n	8000df2 <bootloader+0x10e>
			while (wait_counter)
 8000dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f1      	bne.n	8000dd4 <bootloader+0xf0>
 8000df0:	e000      	b.n	8000df4 <bootloader+0x110>
				{
					break;
 8000df2:	bf00      	nop
				}
				// wait_counter--;
			}
			// Извлекаем из пакета 7 байт прошивки и кладем в кольцевой буфер
			for (int j = 1; j < 8; j++)
 8000df4:	2301      	movs	r3, #1
 8000df6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000df8:	e00c      	b.n	8000e14 <bootloader+0x130>
			{
				pushBuff(&toDecrypt, RxData[j]);
 8000dfa:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000dfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e00:	4413      	add	r3, r2
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	463b      	mov	r3, r7
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f89f 	bl	8000f4c <pushBuff>
			for (int j = 1; j < 8; j++)
 8000e0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e10:	3301      	adds	r3, #1
 8000e12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000e14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e16:	2b07      	cmp	r3, #7
 8000e18:	ddef      	ble.n	8000dfa <bootloader+0x116>
			}
			// Если буфер заполнен, расшифруем его
			if (isBuffFull(&toDecrypt))
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f871 	bl	8000f04 <isBuffFull>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d01d      	beq.n	8000e64 <bootloader+0x180>
			{
				buffDecrypt(&toDecrypt, isDecripted);
 8000e28:	f107 0220 	add.w	r2, r7, #32
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f8e3 	bl	8000ffc <buffDecrypt>
				__ASM("nop");
 8000e36:	bf00      	nop
//				if (isDecripted[0] == 0 || isDecripted[1] == 0)
//				{
//					Error_Handler();
//				}
				// Расшифрованный сегмент прошивки записываем во флеш
				HAL_FLASH_Unlock();
 8000e38:	f001 fb30 	bl	800249c <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, currentProgramAppAddr, isDecripted[0]);
 8000e3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e40:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000e42:	2000      	movs	r0, #0
 8000e44:	f001 fabe 	bl	80023c4 <HAL_FLASH_Program>
				currentProgramAppAddr += 8;
 8000e48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, currentProgramAppAddr, isDecripted[1]);
 8000e4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000e52:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000e54:	2000      	movs	r0, #0
 8000e56:	f001 fab5 	bl	80023c4 <HAL_FLASH_Program>
				currentProgramAppAddr += 8;
 8000e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
				HAL_FLASH_Lock();
 8000e60:	f001 fb3e 	bl	80024e0 <HAL_FLASH_Lock>
			}
			// Отправляем подтверждение
			switch (RxData[0])
 8000e64:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	dc02      	bgt.n	8000e72 <bootloader+0x18e>
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	da04      	bge.n	8000e7a <bootloader+0x196>
 8000e70:	e011      	b.n	8000e96 <bootloader+0x1b2>
 8000e72:	3b10      	subs	r3, #16
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d80e      	bhi.n	8000e96 <bootloader+0x1b2>
 8000e78:	e006      	b.n	8000e88 <bootloader+0x1a4>
			{
			case SDO_NORMAL_TRANSFER_SRB_REQ:
			case SDO_NORMAL_TRANSFER_SRB_REQ_LAST:
			{
				FDCAN1_TransmitMessage(SDO_RX, &transmitResponse, 1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4915      	ldr	r1, [pc, #84]	@ (8000ed4 <bootloader+0x1f0>)
 8000e7e:	f240 5082 	movw	r0, #1410	@ 0x582
 8000e82:	f000 fa63 	bl	800134c <FDCAN1_TransmitMessage>
			}
			break;
 8000e86:	e006      	b.n	8000e96 <bootloader+0x1b2>
			case SDO_NORMAL_TRANSFER_SRB_REQ_TG:
			case SDO_NORMAL_TRANSFER_SRB_REQ_LAST_TG:
			{
				FDCAN1_TransmitMessage(SDO_RX, &transmitToggleResponse, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4913      	ldr	r1, [pc, #76]	@ (8000ed8 <bootloader+0x1f4>)
 8000e8c:	f240 5082 	movw	r0, #1410	@ 0x582
 8000e90:	f000 fa5c 	bl	800134c <FDCAN1_TransmitMessage>
			}
			break;
 8000e94:	bf00      	nop
		for (int i = 0; i < AppSize+1; i += 7)
 8000e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e98:	3307      	adds	r3, #7
 8000e9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d891      	bhi.n	8000dca <bootloader+0xe6>
			}
		}
		HAL_Delay(1000);
 8000ea6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eaa:	f000 fd25 	bl	80018f8 <HAL_Delay>
		// Вызываем функцию JumpToApplication с новыми параметрами
		JumpToApplication();
 8000eae:	f000 f9cb 	bl	8001248 <JumpToApplication>
	else
	{
		// Вызываем функцию JumpToApplication со стандартными параметрами
		JumpToApplication();
	}
}
 8000eb2:	e001      	b.n	8000eb8 <bootloader+0x1d4>
		JumpToApplication();
 8000eb4:	f000 f9c8 	bl	8001248 <JumpToApplication>
}
 8000eb8:	bf00      	nop
 8000eba:	3770      	adds	r7, #112	@ 0x70
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40002504 	.word	0x40002504
 8000ec4:	08008000 	.word	0x08008000
 8000ec8:	20000060 	.word	0x20000060
 8000ecc:	000f4240 	.word	0x000f4240
 8000ed0:	20000010 	.word	0x20000010
 8000ed4:	20000014 	.word	0x20000014
 8000ed8:	20000015 	.word	0x20000015

08000edc <isBuffEmpty>:
//////////////////////////////////////////////////
// Функция: Проверка, пуст ли буфер
bool isBuffEmpty(RingBuff *buff)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	return buff->head == buff->tail;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699a      	ldr	r2, [r3, #24]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	bf0c      	ite	eq
 8000ef0:	2301      	moveq	r3, #1
 8000ef2:	2300      	movne	r3, #0
 8000ef4:	b2db      	uxtb	r3, r3
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <isBuffFull>:
//////////////////////////////////////////////////
// Функция: Проверка, полон ли буфер
bool isBuffFull(RingBuff *buff)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	return (buff->tail + 1) % RING_BUFF_SIZE == buff->head;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	1c59      	adds	r1, r3, #1
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <isBuffFull+0x44>)
 8000f14:	fba3 2301 	umull	r2, r3, r3, r1
 8000f18:	1aca      	subs	r2, r1, r3
 8000f1a:	0852      	lsrs	r2, r2, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	091a      	lsrs	r2, r3, #4
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00da      	lsls	r2, r3, #3
 8000f28:	1ad2      	subs	r2, r2, r3
 8000f2a:	1a8a      	subs	r2, r1, r2
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	bf0c      	ite	eq
 8000f34:	2301      	moveq	r3, #1
 8000f36:	2300      	movne	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	86186187 	.word	0x86186187

08000f4c <pushBuff>:
//////////////////////////////////////////////////
// Функция: Добавление элемента в буфер
bool pushBuff(RingBuff *buff, uint8_t data)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
	if (isBuffFull(buff))
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ffd3 	bl	8000f04 <isBuffFull>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <pushBuff+0x1c>
	{
		return false;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e017      	b.n	8000f98 <pushBuff+0x4c>
	}
	buff->data[buff->tail] = data;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	78f9      	ldrb	r1, [r7, #3]
 8000f70:	54d1      	strb	r1, [r2, r3]
	buff->tail = (buff->tail + 1) % RING_BUFF_SIZE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	1c59      	adds	r1, r3, #1
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <pushBuff+0x54>)
 8000f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8000f7e:	1aca      	subs	r2, r1, r3
 8000f80:	0852      	lsrs	r2, r2, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	091a      	lsrs	r2, r3, #4
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00da      	lsls	r2, r3, #3
 8000f8e:	1ad2      	subs	r2, r2, r3
 8000f90:	1a8a      	subs	r2, r1, r2
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	61da      	str	r2, [r3, #28]
	return true;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	86186187 	.word	0x86186187

08000fa4 <popBuff>:
//////////////////////////////////////////////////
// Функция: Извлечение элемента из буфера
bool popBuff(RingBuff *buff, uint8_t *data)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	if (isBuffEmpty(buff))
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff94 	bl	8000edc <isBuffEmpty>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <popBuff+0x1a>
	{
		return false;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e018      	b.n	8000ff0 <popBuff+0x4c>
	}
	*data = buff->data[buff->head];
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	5cd2      	ldrb	r2, [r2, r3]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	701a      	strb	r2, [r3, #0]
	buff->head = (buff->head + 1) % RING_BUFF_SIZE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	1c59      	adds	r1, r3, #1
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <popBuff+0x54>)
 8000fd2:	fba3 2301 	umull	r2, r3, r3, r1
 8000fd6:	1aca      	subs	r2, r1, r3
 8000fd8:	0852      	lsrs	r2, r2, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	091a      	lsrs	r2, r3, #4
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00da      	lsls	r2, r3, #3
 8000fe6:	1ad2      	subs	r2, r2, r3
 8000fe8:	1a8a      	subs	r2, r1, r2
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
	return true;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	86186187 	.word	0x86186187

08000ffc <buffDecrypt>:
//////////////////////////////////////////////////
// Функция: выдергивает 16 байт из кольцевого буфера и расшифрует их
void buffDecrypt(RingBuff *toDecrypt, uint64_t *isDecrypted)
{
 8000ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001000:	b0ce      	sub	sp, #312	@ 0x138
 8001002:	af00      	add	r7, sp, #0
 8001004:	6578      	str	r0, [r7, #84]	@ 0x54
 8001006:	6539      	str	r1, [r7, #80]	@ 0x50
	uint8_t buff = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
	uint8_t arr[16] = {0};
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001014:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001018:	2300      	movs	r3, #0
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	6053      	str	r3, [r2, #4]
 800101e:	6093      	str	r3, [r2, #8]
	for (int i = 0; i < 16; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001026:	e013      	b.n	8001050 <buffDecrypt+0x54>
	{
		popBuff(toDecrypt, &buff);
 8001028:	f207 132f 	addw	r3, r7, #303	@ 0x12f
 800102c:	4619      	mov	r1, r3
 800102e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001030:	f7ff ffb8 	bl	8000fa4 <popBuff>
		arr[i] = buff;
 8001034:	f897 112f 	ldrb.w	r1, [r7, #303]	@ 0x12f
 8001038:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 800103c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001040:	441a      	add	r2, r3
 8001042:	460b      	mov	r3, r1
 8001044:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < 16; i++)
 8001046:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800104a:	3301      	adds	r3, #1
 800104c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001050:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001054:	2b0f      	cmp	r3, #15
 8001056:	dde7      	ble.n	8001028 <buffDecrypt+0x2c>
	}
	struct AES_ctx ctx;
	AES_init_ctx(&ctx, key);
 8001058:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800105c:	4979      	ldr	r1, [pc, #484]	@ (8001244 <buffDecrypt+0x248>)
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f9aa 	bl	80003b8 <AES_init_ctx>
	AES_ECB_decrypt(&ctx, arr);
 8001064:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8001068:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fdf3 	bl	8000c5a <AES_ECB_decrypt>
	for (int i = 0; i < 4; i++)
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800107a:	e0d7      	b.n	800122c <buffDecrypt+0x230>
	{
		isDecrypted[0] |= (uint64_t)(arr[i]) << (i * 8 + 32);
 800107c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800107e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001082:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8001086:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2200      	movs	r2, #0
 8001092:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001094:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001096:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800109a:	3304      	adds	r3, #4
 800109c:	00d9      	lsls	r1, r3, #3
 800109e:	f1a1 0320 	sub.w	r3, r1, #32
 80010a2:	f1c1 0220 	rsb	r2, r1, #32
 80010a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80010a8:	4088      	lsls	r0, r1
 80010aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80010ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80010ae:	fa00 f303 	lsl.w	r3, r0, r3
 80010b2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80010b4:	4318      	orrs	r0, r3
 80010b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80010b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010ba:	fa23 f202 	lsr.w	r2, r3, r2
 80010be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010c0:	4313      	orrs	r3, r2
 80010c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80010c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010c6:	408b      	lsls	r3, r1
 80010c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80010ce:	460b      	mov	r3, r1
 80010d0:	4323      	orrs	r3, r4
 80010d2:	61bb      	str	r3, [r7, #24]
 80010d4:	4613      	mov	r3, r2
 80010d6:	432b      	orrs	r3, r5
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80010e0:	e9c3 1200 	strd	r1, r2, [r3]
		isDecrypted[0] |= (uint64_t)(arr[i + 4]) << (i * 8);
 80010e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010e6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80010ee:	3304      	adds	r3, #4
 80010f0:	33e8      	adds	r3, #232	@ 0xe8
 80010f2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80010f6:	4413      	add	r3, r2
 80010f8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2200      	movs	r2, #0
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
 8001102:	637a      	str	r2, [r7, #52]	@ 0x34
 8001104:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001108:	00d9      	lsls	r1, r3, #3
 800110a:	f1a1 0320 	sub.w	r3, r1, #32
 800110e:	f1c1 0220 	rsb	r2, r1, #32
 8001112:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001114:	4088      	lsls	r0, r1
 8001116:	6478      	str	r0, [r7, #68]	@ 0x44
 8001118:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800111a:	fa00 f303 	lsl.w	r3, r0, r3
 800111e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001120:	4318      	orrs	r0, r3
 8001122:	6478      	str	r0, [r7, #68]	@ 0x44
 8001124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001126:	fa23 f202 	lsr.w	r2, r3, r2
 800112a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800112c:	4313      	orrs	r3, r2
 800112e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001132:	408b      	lsls	r3, r1
 8001134:	643b      	str	r3, [r7, #64]	@ 0x40
 8001136:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800113a:	460b      	mov	r3, r1
 800113c:	4323      	orrs	r3, r4
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	4613      	mov	r3, r2
 8001142:	432b      	orrs	r3, r5
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001148:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800114c:	e9c3 1200 	strd	r1, r2, [r3]
		isDecrypted[1] |= (uint64_t)(arr[i + 8]) << (i * 8 + 32);
 8001150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001152:	3308      	adds	r3, #8
 8001154:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001158:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800115c:	3308      	adds	r3, #8
 800115e:	33e8      	adds	r3, #232	@ 0xe8
 8001160:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001164:	4413      	add	r3, r2
 8001166:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2200      	movs	r2, #0
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001170:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001172:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001176:	3304      	adds	r3, #4
 8001178:	00d9      	lsls	r1, r3, #3
 800117a:	f1a1 0320 	sub.w	r3, r1, #32
 800117e:	f1c1 0220 	rsb	r2, r1, #32
 8001182:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001184:	fa00 fb01 	lsl.w	fp, r0, r1
 8001188:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800118a:	fa00 f303 	lsl.w	r3, r0, r3
 800118e:	ea4b 0b03 	orr.w	fp, fp, r3
 8001192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001194:	fa23 f202 	lsr.w	r2, r3, r2
 8001198:	ea4b 0b02 	orr.w	fp, fp, r2
 800119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119e:	fa03 fa01 	lsl.w	sl, r3, r1
 80011a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011a4:	3308      	adds	r3, #8
 80011a6:	ea44 020a 	orr.w	r2, r4, sl
 80011aa:	60ba      	str	r2, [r7, #8]
 80011ac:	ea45 020b 	orr.w	r2, r5, fp
 80011b0:	60fa      	str	r2, [r7, #12]
 80011b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80011b6:	e9c3 1200 	strd	r1, r2, [r3]
		isDecrypted[1] |= (uint64_t)(arr[i + 12]) << (i * 8);
 80011ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011bc:	3308      	adds	r3, #8
 80011be:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80011c6:	330c      	adds	r3, #12
 80011c8:	33e8      	adds	r3, #232	@ 0xe8
 80011ca:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80011ce:	4413      	add	r3, r2
 80011d0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2200      	movs	r2, #0
 80011d8:	623b      	str	r3, [r7, #32]
 80011da:	627a      	str	r2, [r7, #36]	@ 0x24
 80011dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80011e0:	00d9      	lsls	r1, r3, #3
 80011e2:	f1a1 0320 	sub.w	r3, r1, #32
 80011e6:	f1c1 0220 	rsb	r2, r1, #32
 80011ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011ec:	fa00 f901 	lsl.w	r9, r0, r1
 80011f0:	6a38      	ldr	r0, [r7, #32]
 80011f2:	fa00 f303 	lsl.w	r3, r0, r3
 80011f6:	ea49 0903 	orr.w	r9, r9, r3
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	fa23 f202 	lsr.w	r2, r3, r2
 8001200:	ea49 0902 	orr.w	r9, r9, r2
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	fa03 f801 	lsl.w	r8, r3, r1
 800120a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800120c:	3308      	adds	r3, #8
 800120e:	ea44 0208 	orr.w	r2, r4, r8
 8001212:	603a      	str	r2, [r7, #0]
 8001214:	ea45 0209 	orr.w	r2, r5, r9
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800121e:	e9c3 1200 	strd	r1, r2, [r3]
	for (int i = 0; i < 4; i++)
 8001222:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001226:	3301      	adds	r3, #1
 8001228:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800122c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001230:	2b03      	cmp	r3, #3
 8001232:	f77f af23 	ble.w	800107c <buffDecrypt+0x80>
	}
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800123e:	46bd      	mov	sp, r7
 8001240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001244:	20000000 	.word	0x20000000

08001248 <JumpToApplication>:
//////////////////////////////////////////////////
// Функция:
typedef void (*pFunction)(void);
void JumpToApplication(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pFunction Jump_To_Application;

	uint32_t vectorAddr = STD_APP_ADDR;
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <JumpToApplication+0x50>)
 8001250:	617b      	str	r3, [r7, #20]
	uint32_t steckAddr = STD_APP_ADDR;
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <JumpToApplication+0x50>)
 8001254:	613b      	str	r3, [r7, #16]
	uint32_t procAddr = STD_APP_ADDR + 4;
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <JumpToApplication+0x54>)
 8001258:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125a:	b672      	cpsid	i
}
 800125c:	bf00      	nop

	__disable_irq();

	HAL_FDCAN_MspDeInit(&hfdcan1);
 800125e:	4810      	ldr	r0, [pc, #64]	@ (80012a0 <JumpToApplication+0x58>)
 8001260:	f000 f93e 	bl	80014e0 <HAL_FDCAN_MspDeInit>
	HAL_RCC_DeInit();
 8001264:	f001 fe96 	bl	8002f94 <HAL_RCC_DeInit>
	HAL_DeInit();
 8001268:	f000 faba 	bl	80017e0 <HAL_DeInit>

	SCB->VTOR = vectorAddr;
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <JumpToApplication+0x5c>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	6093      	str	r3, [r2, #8]

	// Получаем адрес Reset Handler приложения
	JumpAddress = *(volatile uint32_t *)(procAddr);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	60bb      	str	r3, [r7, #8]
	Jump_To_Application = (pFunction)JumpAddress;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	607b      	str	r3, [r7, #4]

	// Устанавливаем указатель стека (SP) из вектора сброса приложения
	__set_MSP(*(volatile uint32_t *)steckAddr);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	f383 8808 	msr	MSP, r3
}
 8001288:	bf00      	nop
	// Переход к приложению
	Jump_To_Application();
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4798      	blx	r3
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	08008000 	.word	0x08008000
 800129c:	08008004 	.word	0x08008004
 80012a0:	20000060 	.word	0x20000060
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <FDCAN1_FilterSet>:

void FDCAN1_FilterSet(uint32_t filterCAN_ID1, uint32_t filtermask)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80012ba:	2302      	movs	r3, #2
 80012bc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80012be:	2301      	movs	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = filterCAN_ID1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = filtermask;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	61fb      	str	r3, [r7, #28]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <FDCAN1_FilterSet+0x5c>)
 80012d2:	f000 fd71 	bl	8001db8 <HAL_FDCAN_ConfigFilter>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <FDCAN1_FilterSet+0x38>
	{
		Error_Handler();
 80012dc:	f000 f9d2 	bl	8001684 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80012e0:	2300      	movs	r3, #0
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2300      	movs	r3, #0
 80012e6:	2202      	movs	r2, #2
 80012e8:	2102      	movs	r1, #2
 80012ea:	4806      	ldr	r0, [pc, #24]	@ (8001304 <FDCAN1_FilterSet+0x5c>)
 80012ec:	f000 fdbe 	bl	8001e6c <HAL_FDCAN_ConfigGlobalFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <FDCAN1_FilterSet+0x52>
	{
	  Error_Handler();
 80012f6:	f000 f9c5 	bl	8001684 <Error_Handler>
	}
}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000060 	.word	0x20000060

08001308 <FDCAN1_ReceiveMessage>:

void FDCAN1_ReceiveMessage(uint8_t *RxData, uint32_t *len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	@ 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0)
 8001312:	2140      	movs	r1, #64	@ 0x40
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <FDCAN1_ReceiveMessage+0x40>)
 8001316:	f000 ff4f 	bl	80021b8 <HAL_FDCAN_GetRxFifoFillLevel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00e      	beq.n	800133e <FDCAN1_ReceiveMessage+0x36>
	{
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001320:	f107 0208 	add.w	r2, r7, #8
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2140      	movs	r1, #64	@ 0x40
 8001328:	4807      	ldr	r0, [pc, #28]	@ (8001348 <FDCAN1_ReceiveMessage+0x40>)
 800132a:	f000 fe3d 	bl	8001fa8 <HAL_FDCAN_GetRxMessage>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <FDCAN1_ReceiveMessage+0x30>
		{
			Error_Handler();
 8001334:	f000 f9a6 	bl	8001684 <Error_Handler>
		}
		*len = RxHeader.DataLength;
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	601a      	str	r2, [r3, #0]
	}
}
 800133e:	bf00      	nop
 8001340:	3730      	adds	r7, #48	@ 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000060 	.word	0x20000060

0800134c <FDCAN1_TransmitMessage>:

void FDCAN1_TransmitMessage(uint32_t CAN_ID, uint8_t *data, uint32_t len)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	@ 0x38
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.Identifier = CAN_ID;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	617b      	str	r3, [r7, #20]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
	TxHeader.DataLength = len;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	623b      	str	r3, [r7, #32]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	@ 0x30
	TxHeader.MessageMarker = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	@ 0x34

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK)
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <FDCAN1_TransmitMessage+0x50>)
 8001386:	f000 fdca 	bl	8001f1e <HAL_FDCAN_AddMessageToTxFifoQ>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <FDCAN1_TransmitMessage+0x48>
	{
		Error_Handler();
 8001390:	f000 f978 	bl	8001684 <Error_Handler>
	}
}
 8001394:	bf00      	nop
 8001396:	3738      	adds	r7, #56	@ 0x38
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000060 	.word	0x20000060

080013a0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013a6:	4a20      	ldr	r2, [pc, #128]	@ (8001428 <MX_FDCAN1_Init+0x88>)
 80013a8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80013b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80013b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013be:	2200      	movs	r2, #0
 80013c0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80013c8:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013d0:	2205      	movs	r2, #5
 80013d2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80013d4:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013dc:	220e      	movs	r2, #14
 80013de:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 8001400:	2201      	movs	r2, #1
 8001402:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 8001406:	2200      	movs	r2, #0
 8001408:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 800140c:	2200      	movs	r2, #0
 800140e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_FDCAN1_Init+0x84>)
 8001412:	f000 fb77 	bl	8001b04 <HAL_FDCAN_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800141c:	f000 f932 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000060 	.word	0x20000060
 8001428:	40006400 	.word	0x40006400

0800142c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b09e      	sub	sp, #120	@ 0x78
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	2254      	movs	r2, #84	@ 0x54
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f002 fdad 	bl	8003fac <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a20      	ldr	r2, [pc, #128]	@ (80014d8 <HAL_FDCAN_MspInit+0xac>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d139      	bne.n	80014d0 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001462:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001466:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fb4f 	bl	8003b10 <HAL_RCCEx_PeriphCLKConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001478:	f000 f904 	bl	8001684 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800147c:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <HAL_FDCAN_MspInit+0xb0>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001480:	4a16      	ldr	r2, [pc, #88]	@ (80014dc <HAL_FDCAN_MspInit+0xb0>)
 8001482:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001486:	6593      	str	r3, [r2, #88]	@ 0x58
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <HAL_FDCAN_MspInit+0xb0>)
 800148a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_FDCAN_MspInit+0xb0>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <HAL_FDCAN_MspInit+0xb0>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_FDCAN_MspInit+0xb0>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014ac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80014b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80014be:	2309      	movs	r3, #9
 80014c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014cc:	f001 fa32 	bl	8002934 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80014d0:	bf00      	nop
 80014d2:	3778      	adds	r7, #120	@ 0x78
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40006400 	.word	0x40006400
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_FDCAN_MspDeInit>:

void HAL_FDCAN_MspDeInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  if(fdcanHandle->Instance==FDCAN1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a09      	ldr	r2, [pc, #36]	@ (8001514 <HAL_FDCAN_MspDeInit+0x34>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d10b      	bne.n	800150a <HAL_FDCAN_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN FDCAN1_MspDeInit 0 */

  /* USER CODE END FDCAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_FDCAN_CLK_DISABLE();
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_FDCAN_MspDeInit+0x38>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f6:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <HAL_FDCAN_MspDeInit+0x38>)
 80014f8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80014fc:	6593      	str	r3, [r2, #88]	@ 0x58

    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80014fe:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001506:	f001 fb97 	bl	8002c38 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN FDCAN1_MspDeInit 1 */

  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40006400 	.word	0x40006400
 8001518:	40021000 	.word	0x40021000

0800151c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001532:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <MX_GPIO_Init+0x90>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a1d      	ldr	r2, [pc, #116]	@ (80015ac <MX_GPIO_Init+0x90>)
 8001538:	f043 0320 	orr.w	r3, r3, #32
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <MX_GPIO_Init+0x90>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <MX_GPIO_Init+0x90>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <MX_GPIO_Init+0x90>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <MX_GPIO_Init+0x90>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <MX_GPIO_Init+0x90>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a11      	ldr	r2, [pc, #68]	@ (80015ac <MX_GPIO_Init+0x90>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_GPIO_Init+0x90>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2120      	movs	r1, #32
 800157e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001582:	f001 fc3b 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_led_Pin */
  GPIO_InitStruct.Pin = user_led_Pin;
 8001586:	2320      	movs	r3, #32
 8001588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a0:	f001 f9c8 	bl	8002934 <HAL_GPIO_Init>

}
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000

080015b0 <main>:
void SystemClock_Config(void);



int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015b4:	f000 f8fb 	bl	80017ae <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 80015b8:	f000 f80e 	bl	80015d8 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init(); 
 80015bc:	f7ff ffae 	bl	800151c <MX_GPIO_Init>
	backup_reg_write(0x0,&TAMP->BKP1R);
 80015c0:	4904      	ldr	r1, [pc, #16]	@ (80015d4 <main+0x24>)
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff fb58 	bl	8000c78 <backup_reg_write>
	bootloader();
 80015c8:	f7ff fb8c 	bl	8000ce4 <bootloader>
 80015cc:	2300      	movs	r3, #0
	// 		RxDataLen = 0;
	// 	} 
	// 	HAL_GPIO_TogglePin(user_led_GPIO_Port, user_led_Pin);
	// 	HAL_Delay(1000);
	// }
} 
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40002504 	.word	0x40002504

080015d8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b094      	sub	sp, #80	@ 0x50
 80015dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015de:	f107 0318 	add.w	r3, r7, #24
 80015e2:	2238      	movs	r2, #56	@ 0x38
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fce0 	bl	8003fac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f001 fc16 	bl	8002e2c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8001600:	230a      	movs	r3, #10
 8001602:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160a:	2340      	movs	r3, #64	@ 0x40
 800160c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800160e:	2301      	movs	r3, #1
 8001610:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001612:	2302      	movs	r3, #2
 8001614:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001616:	2302      	movs	r3, #2
 8001618:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800161a:	2304      	movs	r3, #4
 800161c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800161e:	2355      	movs	r3, #85	@ 0x55
 8001620:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001622:	2302      	movs	r3, #2
 8001624:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001626:	2302      	movs	r3, #2
 8001628:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800162a:	2302      	movs	r3, #2
 800162c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162e:	f107 0318 	add.w	r3, r7, #24
 8001632:	4618      	mov	r0, r3
 8001634:	f001 fd30 	bl	8003098 <HAL_RCC_OscConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 800163e:	f000 f821 	bl	8001684 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001642:	230f      	movs	r3, #15
 8001644:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001646:	2303      	movs	r3, #3
 8001648:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2104      	movs	r1, #4
 800165a:	4618      	mov	r0, r3
 800165c:	f002 f82e 	bl	80036bc <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8001666:	f000 f80d 	bl	8001684 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 800166a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800166e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001672:	4803      	ldr	r0, [pc, #12]	@ (8001680 <SystemClock_Config+0xa8>)
 8001674:	f002 f95e 	bl	8003934 <HAL_RCC_MCOConfig>
}
 8001678:	bf00      	nop
 800167a:	3750      	adds	r7, #80	@ 0x50
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	00060400 	.word	0x00060400

08001684 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <Error_Handler+0x8>

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <HAL_MspInit+0x44>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169a:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <HAL_MspInit+0x44>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80016a2:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <HAL_MspInit+0x44>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <HAL_MspInit+0x44>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b2:	4a08      	ldr	r2, [pc, #32]	@ (80016d4 <HAL_MspInit+0x44>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_MspInit+0x44>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016c6:	f001 fc55 	bl	8002f74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <NMI_Handler+0x4>

080016e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <MemManage_Handler+0x4>

080016f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <UsageFault_Handler+0x4>

08001700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172e:	f000 f8c5 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800175c:	480d      	ldr	r0, [pc, #52]	@ (8001794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800175e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001760:	f7ff ffea 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <LoopForever+0x6>)
  ldr r1, =_edata
 8001766:	490d      	ldr	r1, [pc, #52]	@ (800179c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <LoopForever+0xe>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800177c:	4c0a      	ldr	r4, [pc, #40]	@ (80017a8 <LoopForever+0x16>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800178a:	f002 fc17 	bl	8003fbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178e:	f7ff ff0f 	bl	80015b0 <main>

08001792 <LoopForever>:

LoopForever:
    b LoopForever
 8001792:	e7fe      	b.n	8001792 <LoopForever>
  ldr   r0, =_estack
 8001794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80017a0:	08004250 	.word	0x08004250
  ldr r2, =_sbss
 80017a4:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80017a8:	200000c8 	.word	0x200000c8

080017ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC1_2_IRQHandler>

080017ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 f971 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017be:	200f      	movs	r0, #15
 80017c0:	f000 f842 	bl	8001848 <HAL_InitTick>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	e001      	b.n	80017d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017d0:	f7ff ff5e 	bl	8001690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017d4:	79fb      	ldrb	r3, [r7, #7]

}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_DeInit>:
  * @brief  This function de-initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80017e4:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <HAL_DeInit+0x54>)
 80017e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017ea:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_DeInit+0x54>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	639a      	str	r2, [r3, #56]	@ 0x38

  __HAL_RCC_APB2_FORCE_RESET();
 80017f2:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <HAL_DeInit+0x54>)
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017f8:	641a      	str	r2, [r3, #64]	@ 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <HAL_DeInit+0x54>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	641a      	str	r2, [r3, #64]	@ 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <HAL_DeInit+0x54>)
 8001802:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001808:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_DeInit+0x54>)
 800180a:	2200      	movs	r2, #0
 800180c:	629a      	str	r2, [r3, #40]	@ 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_DeInit+0x54>)
 8001810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001814:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001816:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <HAL_DeInit+0x54>)
 8001818:	2200      	movs	r2, #0
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_DeInit+0x54>)
 800181e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001822:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_DeInit+0x54>)
 8001826:	2200      	movs	r2, #0
 8001828:	631a      	str	r2, [r3, #48]	@ 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800182a:	f000 f805 	bl	8001838 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021000 	.word	0x40021000

08001838 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001854:	4b16      	ldr	r3, [pc, #88]	@ (80018b0 <HAL_InitTick+0x68>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d022      	beq.n	80018a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800185c:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_InitTick+0x6c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <HAL_InitTick+0x68>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001868:	fbb1 f3f3 	udiv	r3, r1, r3
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f93a 	bl	8001aea <HAL_SYSTICK_Config>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10f      	bne.n	800189c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b0f      	cmp	r3, #15
 8001880:	d809      	bhi.n	8001896 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001882:	2200      	movs	r2, #0
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800188a:	f000 f914 	bl	8001ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <HAL_InitTick+0x70>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e007      	b.n	80018a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e004      	b.n	80018a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e001      	b.n	80018a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000020 	.word	0x20000020
 80018b4:	20000018 	.word	0x20000018
 80018b8:	2000001c 	.word	0x2000001c

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_IncTick+0x1c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_IncTick+0x20>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a03      	ldr	r2, [pc, #12]	@ (80018d8 <HAL_IncTick+0x1c>)
 80018cc:	6013      	str	r3, [r2, #0]
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	200000c4 	.word	0x200000c4
 80018dc:	20000020 	.word	0x20000020

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200000c4 	.word	0x200000c4

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001910:	d004      	beq.n	800191c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <HAL_Delay+0x40>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4413      	add	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191c:	bf00      	nop
 800191e:	f7ff ffdf 	bl	80018e0 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	429a      	cmp	r2, r3
 800192c:	d8f7      	bhi.n	800191e <HAL_Delay+0x26>
  {
  }
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000020 	.word	0x20000020

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	@ (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	@ (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff47 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff5e 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff90 	bl	80019f4 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5f 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffb2 	bl	8001a5c <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e147      	b.n	8001da6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fc7e 	bl	800142c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0210 	bic.w	r2, r2, #16
 8001b3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b40:	f7ff fece 	bl	80018e0 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b46:	e012      	b.n	8001b6e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b48:	f7ff feca 	bl	80018e0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b0a      	cmp	r3, #10
 8001b54:	d90b      	bls.n	8001b6e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2203      	movs	r2, #3
 8001b66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e11b      	b.n	8001da6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d0e5      	beq.n	8001b48 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699a      	ldr	r2, [r3, #24]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b8c:	f7ff fea8 	bl	80018e0 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b92:	e012      	b.n	8001bba <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b94:	f7ff fea4 	bl	80018e0 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b0a      	cmp	r3, #10
 8001ba0:	d90b      	bls.n	8001bba <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0f5      	b.n	8001da6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0e5      	beq.n	8001b94 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0202 	orr.w	r2, r2, #2
 8001bd6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a74      	ldr	r2, [pc, #464]	@ (8001db0 <HAL_FDCAN_Init+0x2ac>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d103      	bne.n	8001bea <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001be2:	4a74      	ldr	r2, [pc, #464]	@ (8001db4 <HAL_FDCAN_Init+0x2b0>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7c1b      	ldrb	r3, [r3, #16]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d108      	bne.n	8001c04 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699a      	ldr	r2, [r3, #24]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c00:	619a      	str	r2, [r3, #24]
 8001c02:	e007      	b.n	8001c14 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c12:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7c5b      	ldrb	r3, [r3, #17]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d108      	bne.n	8001c2e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c2a:	619a      	str	r2, [r3, #24]
 8001c2c:	e007      	b.n	8001c3e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001c3c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7c9b      	ldrb	r3, [r3, #18]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d108      	bne.n	8001c58 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699a      	ldr	r2, [r3, #24]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c54:	619a      	str	r2, [r3, #24]
 8001c56:	e007      	b.n	8001c68 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001c66:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001c8c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0210 	bic.w	r2, r2, #16
 8001c9c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d108      	bne.n	8001cb8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0204 	orr.w	r2, r2, #4
 8001cb4:	619a      	str	r2, [r3, #24]
 8001cb6:	e02c      	b.n	8001d12 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d028      	beq.n	8001d12 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d01c      	beq.n	8001d02 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699a      	ldr	r2, [r3, #24]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001cd6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0210 	orr.w	r2, r2, #16
 8001ce6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d110      	bne.n	8001d12 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0220 	orr.w	r2, r2, #32
 8001cfe:	619a      	str	r2, [r3, #24]
 8001d00:	e007      	b.n	8001d12 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0220 	orr.w	r2, r2, #32
 8001d10:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d22:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d2a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d3a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d3c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d46:	d115      	bne.n	8001d74 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	3b01      	subs	r3, #1
 8001d54:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d56:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001d60:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001d70:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d72:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fa32 	bl	80021f4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40006400 	.word	0x40006400
 8001db4:	40006500 	.word	0x40006500

08001db8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001dc8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d002      	beq.n	8001dd6 <HAL_FDCAN_ConfigFilter+0x1e>
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d13d      	bne.n	8001e52 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d119      	bne.n	8001e12 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001dea:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001df2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e01d      	b.n	8001e4e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	075a      	lsls	r2, r3, #29
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	079a      	lsls	r2, r3, #30
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3304      	adds	r3, #4
 8001e46:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e006      	b.n	8001e60 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e56:	f043 0202 	orr.w	r2, r3, #2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
  }
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d116      	bne.n	8001eb4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e8e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	011a      	lsls	r2, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e006      	b.n	8001ec2 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb8:	f043 0204 	orr.w	r2, r3, #4
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
  }
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d110      	bne.n	8001f04 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e006      	b.n	8001f12 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f08:	f043 0204 	orr.w	r2, r3, #4
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
  }
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d12c      	bne.n	8001f90 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001f3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e023      	b.n	8001f9e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001f5e:	0c1b      	lsrs	r3, r3, #16
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f9ad 	bl	80022cc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2101      	movs	r1, #1
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001f82:	2201      	movs	r2, #1
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e006      	b.n	8001f9e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f94:	f043 0208 	orr.w	r2, r3, #8
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b08b      	sub	sp, #44	@ 0x2c
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001fc0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001fc2:	7efb      	ldrb	r3, [r7, #27]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	f040 80e8 	bne.w	800219a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b40      	cmp	r3, #64	@ 0x40
 8001fce:	d137      	bne.n	8002040 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0db      	b.n	80021a8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff8:	0e1b      	lsrs	r3, r3, #24
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d10a      	bne.n	8002018 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800200a:	0a5b      	lsrs	r3, r3, #9
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002014:	2301      	movs	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
 800203e:	e036      	b.n	80020ae <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002054:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0a3      	b.n	80021a8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002068:	0e1b      	lsrs	r3, r3, #24
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d10a      	bne.n	8002088 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002084:	2301      	movs	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	4413      	add	r3, r2
 800209a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0c9b      	lsrs	r3, r3, #18
 80020c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e005      	b.n	80020de <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	3304      	adds	r3, #4
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29a      	uxth	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	0c1b      	lsrs	r3, r3, #16
 800210c:	f003 020f 	and.w	r2, r3, #15
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0e1b      	lsrs	r3, r3, #24
 8002132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0fda      	lsrs	r2, r3, #31
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	3304      	adds	r3, #4
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
 8002152:	e00a      	b.n	800216a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	441a      	add	r2, r3
 800215a:	6839      	ldr	r1, [r7, #0]
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	440b      	add	r3, r1
 8002160:	7812      	ldrb	r2, [r2, #0]
 8002162:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	3301      	adds	r3, #1
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	4a11      	ldr	r2, [pc, #68]	@ (80021b4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	461a      	mov	r2, r3
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	4293      	cmp	r3, r2
 8002178:	d3ec      	bcc.n	8002154 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b40      	cmp	r3, #64	@ 0x40
 800217e:	d105      	bne.n	800218c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800218a:	e004      	b.n	8002196 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e006      	b.n	80021a8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219e:	f043 0208 	orr.w	r2, r3, #8
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
  }
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	372c      	adds	r7, #44	@ 0x2c
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	08004238 	.word	0x08004238

080021b8 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b40      	cmp	r3, #64	@ 0x40
 80021c6:	d107      	bne.n	80021d8 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e006      	b.n	80021e6 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80021fc:	4b30      	ldr	r3, [pc, #192]	@ (80022c0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80021fe:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a2f      	ldr	r2, [pc, #188]	@ (80022c4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d103      	bne.n	8002212 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002210:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2c      	ldr	r2, [pc, #176]	@ (80022c8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d103      	bne.n	8002224 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8002222:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002232:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800223a:	041a      	lsls	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002258:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002260:	061a      	lsls	r2, r3, #24
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e005      	b.n	80022a6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3304      	adds	r3, #4
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d3f3      	bcc.n	800229a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	4000a400 	.word	0x4000a400
 80022c4:	40006800 	.word	0x40006800
 80022c8:	40006c00 	.word	0x40006c00

080022cc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	@ 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10a      	bne.n	80022f8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80022ea:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	e00a      	b.n	800230e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002300:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002306:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002308:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800230c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002318:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800231e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002324:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	3304      	adds	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	3304      	adds	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e020      	b.n	80023a2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3303      	adds	r3, #3
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3302      	adds	r3, #2
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	440b      	add	r3, r1
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002378:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	440b      	add	r3, r1
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002386:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	440a      	add	r2, r1
 800238e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002390:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	3304      	adds	r3, #4
 800239a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3304      	adds	r3, #4
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4a06      	ldr	r2, [pc, #24]	@ (80023c0 <FDCAN_CopyMessageToRAM+0xf4>)
 80023a8:	5cd3      	ldrb	r3, [r2, r3]
 80023aa:	461a      	mov	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d3d6      	bcc.n	8002360 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
 80023b6:	3724      	adds	r7, #36	@ 0x24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	08004238 	.word	0x08004238

080023c4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002494 <HAL_FLASH_Program+0xd0>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_FLASH_Program+0x1e>
 80023de:	2302      	movs	r3, #2
 80023e0:	e053      	b.n	800248a <HAL_FLASH_Program+0xc6>
 80023e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002494 <HAL_FLASH_Program+0xd0>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023ec:	f000 f892 	bl	8002514 <FLASH_WaitForLastOperation>
 80023f0:	4603      	mov	r3, r0
 80023f2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d143      	bne.n	8002482 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023fa:	4b26      	ldr	r3, [pc, #152]	@ (8002494 <HAL_FLASH_Program+0xd0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002400:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <HAL_FLASH_Program+0xd4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800240c:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <HAL_FLASH_Program+0xd4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a21      	ldr	r2, [pc, #132]	@ (8002498 <HAL_FLASH_Program+0xd4>)
 8002412:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002416:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002418:	4b1e      	ldr	r3, [pc, #120]	@ (8002494 <HAL_FLASH_Program+0xd0>)
 800241a:	2202      	movs	r2, #2
 800241c:	771a      	strb	r2, [r3, #28]
 800241e:	e002      	b.n	8002426 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002420:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <HAL_FLASH_Program+0xd0>)
 8002422:	2200      	movs	r2, #0
 8002424:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800242c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002430:	68b8      	ldr	r0, [r7, #8]
 8002432:	f000 f8c1 	bl	80025b8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002436:	2301      	movs	r3, #1
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	e010      	b.n	800245e <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d002      	beq.n	8002448 <HAL_FLASH_Program+0x84>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d10a      	bne.n	800245e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	68b8      	ldr	r0, [r7, #8]
 800244e:	f000 f8d9 	bl	8002604 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d102      	bne.n	800245e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002458:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800245c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800245e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002462:	f000 f857 	bl	8002514 <FLASH_WaitForLastOperation>
 8002466:	4603      	mov	r3, r0
 8002468:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d006      	beq.n	800247e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002470:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <HAL_FLASH_Program+0xd4>)
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	4907      	ldr	r1, [pc, #28]	@ (8002498 <HAL_FLASH_Program+0xd4>)
 800247a:	4013      	ands	r3, r2
 800247c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800247e:	f000 fa0f 	bl	80028a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002482:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <HAL_FLASH_Program+0xd0>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002488:	7dfb      	ldrb	r3, [r7, #23]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000024 	.word	0x20000024
 8002498:	40022000 	.word	0x40022000

0800249c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80024a6:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <HAL_FLASH_Unlock+0x38>)
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da0b      	bge.n	80024c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <HAL_FLASH_Unlock+0x38>)
 80024b0:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_FLASH_Unlock+0x3c>)
 80024b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80024b4:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <HAL_FLASH_Unlock+0x38>)
 80024b6:	4a09      	ldr	r2, [pc, #36]	@ (80024dc <HAL_FLASH_Unlock+0x40>)
 80024b8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_FLASH_Unlock+0x38>)
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	da01      	bge.n	80024c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80024c6:	79fb      	ldrb	r3, [r7, #7]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40022000 	.word	0x40022000
 80024d8:	45670123 	.word	0x45670123
 80024dc:	cdef89ab 	.word	0xcdef89ab

080024e0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_FLASH_Lock+0x30>)
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	4a08      	ldr	r2, [pc, #32]	@ (8002510 <HAL_FLASH_Lock+0x30>)
 80024f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024f4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_FLASH_Lock+0x30>)
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	da01      	bge.n	8002502 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002502:	79fb      	ldrb	r3, [r7, #7]
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40022000 	.word	0x40022000

08002514 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff f9e0 	bl	80018e0 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002522:	e009      	b.n	8002538 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8002524:	f7ff f9dc 	bl	80018e0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	d201      	bcs.n	8002538 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e037      	b.n	80025a8 <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002538:	4b1d      	ldr	r3, [pc, #116]	@ (80025b0 <FLASH_WaitForLastOperation+0x9c>)
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002544:	d0ee      	beq.n	8002524 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002546:	4b1a      	ldr	r3, [pc, #104]	@ (80025b0 <FLASH_WaitForLastOperation+0x9c>)
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800254e:	4013      	ands	r3, r2
 8002550:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01d      	beq.n	8002594 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8002558:	4b16      	ldr	r3, [pc, #88]	@ (80025b4 <FLASH_WaitForLastOperation+0xa0>)
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4313      	orrs	r3, r2
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <FLASH_WaitForLastOperation+0xa0>)
 8002562:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800256a:	d307      	bcc.n	800257c <FLASH_WaitForLastOperation+0x68>
 800256c:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <FLASH_WaitForLastOperation+0x9c>)
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002576:	490e      	ldr	r1, [pc, #56]	@ (80025b0 <FLASH_WaitForLastOperation+0x9c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	618b      	str	r3, [r1, #24]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <FLASH_WaitForLastOperation+0x7c>
 8002586:	4a0a      	ldr	r2, [pc, #40]	@ (80025b0 <FLASH_WaitForLastOperation+0x9c>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800258e:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e009      	b.n	80025a8 <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <FLASH_WaitForLastOperation+0x9c>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d102      	bne.n	80025a6 <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <FLASH_WaitForLastOperation+0x9c>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40022000 	.word	0x40022000
 80025b4:	20000024 	.word	0x20000024

080025b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80025c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002600 <FLASH_Program_DoubleWord+0x48>)
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002600 <FLASH_Program_DoubleWord+0x48>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80025d6:	f3bf 8f6f 	isb	sy
}
 80025da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80025dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	000a      	movs	r2, r1
 80025ea:	2300      	movs	r3, #0
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	3104      	adds	r1, #4
 80025f0:	4613      	mov	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40022000 	.word	0x40022000

08002604 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800260e:	2340      	movs	r3, #64	@ 0x40
 8002610:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800261a:	4b14      	ldr	r3, [pc, #80]	@ (800266c <FLASH_Program_Fast+0x68>)
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	4a13      	ldr	r2, [pc, #76]	@ (800266c <FLASH_Program_Fast+0x68>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002624:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002626:	f3ef 8310 	mrs	r3, PRIMASK
 800262a:	60fb      	str	r3, [r7, #12]
  return(result);
 800262c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800262e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002630:	b672      	cpsid	i
}
 8002632:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	3304      	adds	r3, #4
 8002640:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3304      	adds	r3, #4
 8002646:	617b      	str	r3, [r7, #20]
    row_index--;
 8002648:	7ffb      	ldrb	r3, [r7, #31]
 800264a:	3b01      	subs	r3, #1
 800264c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800264e:	7ffb      	ldrb	r3, [r7, #31]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ef      	bne.n	8002634 <FLASH_Program_Fast+0x30>
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f383 8810 	msr	PRIMASK, r3
}
 800265e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002660:	bf00      	nop
 8002662:	3724      	adds	r7, #36	@ 0x24
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40022000 	.word	0x40022000

08002670 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800267a:	4b49      	ldr	r3, [pc, #292]	@ (80027a0 <HAL_FLASHEx_Erase+0x130>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_FLASHEx_Erase+0x16>
 8002682:	2302      	movs	r3, #2
 8002684:	e087      	b.n	8002796 <HAL_FLASHEx_Erase+0x126>
 8002686:	4b46      	ldr	r3, [pc, #280]	@ (80027a0 <HAL_FLASHEx_Erase+0x130>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800268c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002690:	f7ff ff40 	bl	8002514 <FLASH_WaitForLastOperation>
 8002694:	4603      	mov	r3, r0
 8002696:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d177      	bne.n	800278e <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800269e:	4b40      	ldr	r3, [pc, #256]	@ (80027a0 <HAL_FLASHEx_Erase+0x130>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80026a4:	4b3f      	ldr	r3, [pc, #252]	@ (80027a4 <HAL_FLASHEx_Erase+0x134>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80026b0:	4b3c      	ldr	r3, [pc, #240]	@ (80027a4 <HAL_FLASHEx_Erase+0x134>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80026bc:	4b39      	ldr	r3, [pc, #228]	@ (80027a4 <HAL_FLASHEx_Erase+0x134>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a38      	ldr	r2, [pc, #224]	@ (80027a4 <HAL_FLASHEx_Erase+0x134>)
 80026c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026c6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80026c8:	4b35      	ldr	r3, [pc, #212]	@ (80027a0 <HAL_FLASHEx_Erase+0x130>)
 80026ca:	2203      	movs	r2, #3
 80026cc:	771a      	strb	r2, [r3, #28]
 80026ce:	e016      	b.n	80026fe <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80026d0:	4b33      	ldr	r3, [pc, #204]	@ (80027a0 <HAL_FLASHEx_Erase+0x130>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	771a      	strb	r2, [r3, #28]
 80026d6:	e012      	b.n	80026fe <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80026d8:	4b32      	ldr	r3, [pc, #200]	@ (80027a4 <HAL_FLASHEx_Erase+0x134>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80026e4:	4b2f      	ldr	r3, [pc, #188]	@ (80027a4 <HAL_FLASHEx_Erase+0x134>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2e      	ldr	r2, [pc, #184]	@ (80027a4 <HAL_FLASHEx_Erase+0x134>)
 80026ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026ee:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80026f0:	4b2b      	ldr	r3, [pc, #172]	@ (80027a0 <HAL_FLASHEx_Erase+0x130>)
 80026f2:	2202      	movs	r2, #2
 80026f4:	771a      	strb	r2, [r3, #28]
 80026f6:	e002      	b.n	80026fe <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80026f8:	4b29      	ldr	r3, [pc, #164]	@ (80027a0 <HAL_FLASHEx_Erase+0x130>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d113      	bne.n	800272e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f84c 	bl	80027a8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002710:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002714:	f7ff fefe 	bl	8002514 <FLASH_WaitForLastOperation>
 8002718:	4603      	mov	r3, r0
 800271a:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800271c:	4b21      	ldr	r3, [pc, #132]	@ (80027a4 <HAL_FLASHEx_Erase+0x134>)
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4a20      	ldr	r2, [pc, #128]	@ (80027a4 <HAL_FLASHEx_Erase+0x134>)
 8002722:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002726:	f023 0304 	bic.w	r3, r3, #4
 800272a:	6153      	str	r3, [r2, #20]
 800272c:	e02d      	b.n	800278a <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002734:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	e01d      	b.n	800277a <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4619      	mov	r1, r3
 8002744:	68b8      	ldr	r0, [r7, #8]
 8002746:	f000 f867 	bl	8002818 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800274a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800274e:	f7ff fee1 	bl	8002514 <FLASH_WaitForLastOperation>
 8002752:	4603      	mov	r3, r0
 8002754:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002756:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <HAL_FLASHEx_Erase+0x134>)
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <HAL_FLASHEx_Erase+0x134>)
 800275c:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8002760:	f023 0302 	bic.w	r3, r3, #2
 8002764:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	601a      	str	r2, [r3, #0]
          break;
 8002772:	e00a      	b.n	800278a <HAL_FLASHEx_Erase+0x11a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3301      	adds	r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4413      	add	r3, r2
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	429a      	cmp	r2, r3
 8002788:	d3d9      	bcc.n	800273e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800278a:	f000 f889 	bl	80028a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800278e:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <HAL_FLASHEx_Erase+0x130>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]

  return status;
 8002794:	7bfb      	ldrb	r3, [r7, #15]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000024 	.word	0x20000024
 80027a4:	40022000 	.word	0x40022000

080027a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 80027b0:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <FLASH_MassErase+0x6c>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d016      	beq.n	80027ea <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80027c6:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <FLASH_MassErase+0x6c>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4a12      	ldr	r2, [pc, #72]	@ (8002814 <FLASH_MassErase+0x6c>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00e      	beq.n	80027fa <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80027dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <FLASH_MassErase+0x6c>)
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002814 <FLASH_MassErase+0x6c>)
 80027e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027e6:	6153      	str	r3, [r2, #20]
 80027e8:	e007      	b.n	80027fa <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80027ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <FLASH_MassErase+0x6c>)
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	4a09      	ldr	r2, [pc, #36]	@ (8002814 <FLASH_MassErase+0x6c>)
 80027f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80027fa:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <FLASH_MassErase+0x6c>)
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <FLASH_MassErase+0x6c>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	6153      	str	r3, [r2, #20]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40022000 	.word	0x40022000

08002818 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002822:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <FLASH_PageErase+0x84>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800282e:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <FLASH_PageErase+0x84>)
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	4a1a      	ldr	r2, [pc, #104]	@ (800289c <FLASH_PageErase+0x84>)
 8002834:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002838:	6153      	str	r3, [r2, #20]
 800283a:	e011      	b.n	8002860 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002846:	4b15      	ldr	r3, [pc, #84]	@ (800289c <FLASH_PageErase+0x84>)
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4a14      	ldr	r2, [pc, #80]	@ (800289c <FLASH_PageErase+0x84>)
 800284c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002850:	6153      	str	r3, [r2, #20]
 8002852:	e005      	b.n	8002860 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002854:	4b11      	ldr	r3, [pc, #68]	@ (800289c <FLASH_PageErase+0x84>)
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	4a10      	ldr	r2, [pc, #64]	@ (800289c <FLASH_PageErase+0x84>)
 800285a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800285e:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002860:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <FLASH_PageErase+0x84>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8002870:	490a      	ldr	r1, [pc, #40]	@ (800289c <FLASH_PageErase+0x84>)
 8002872:	4313      	orrs	r3, r2
 8002874:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002876:	4b09      	ldr	r3, [pc, #36]	@ (800289c <FLASH_PageErase+0x84>)
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4a08      	ldr	r2, [pc, #32]	@ (800289c <FLASH_PageErase+0x84>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <FLASH_PageErase+0x84>)
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4a05      	ldr	r2, [pc, #20]	@ (800289c <FLASH_PageErase+0x84>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288c:	6153      	str	r3, [r2, #20]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40022000 	.word	0x40022000

080028a0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80028a6:	4b21      	ldr	r3, [pc, #132]	@ (800292c <FLASH_FlushCaches+0x8c>)
 80028a8:	7f1b      	ldrb	r3, [r3, #28]
 80028aa:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d002      	beq.n	80028b8 <FLASH_FlushCaches+0x18>
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d117      	bne.n	80028e8 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80028b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <FLASH_FlushCaches+0x90>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002930 <FLASH_FlushCaches+0x90>)
 80028be:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028c2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80028c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <FLASH_FlushCaches+0x90>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a19      	ldr	r2, [pc, #100]	@ (8002930 <FLASH_FlushCaches+0x90>)
 80028ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <FLASH_FlushCaches+0x90>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a16      	ldr	r2, [pc, #88]	@ (8002930 <FLASH_FlushCaches+0x90>)
 80028d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028dc:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <FLASH_FlushCaches+0x90>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a13      	ldr	r2, [pc, #76]	@ (8002930 <FLASH_FlushCaches+0x90>)
 80028e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028e6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d002      	beq.n	80028f4 <FLASH_FlushCaches+0x54>
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d111      	bne.n	8002918 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <FLASH_FlushCaches+0x90>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002930 <FLASH_FlushCaches+0x90>)
 80028fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <FLASH_FlushCaches+0x90>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <FLASH_FlushCaches+0x90>)
 8002906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800290a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <FLASH_FlushCaches+0x90>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <FLASH_FlushCaches+0x90>)
 8002912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002916:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002918:	4b04      	ldr	r3, [pc, #16]	@ (800292c <FLASH_FlushCaches+0x8c>)
 800291a:	2200      	movs	r2, #0
 800291c:	771a      	strb	r2, [r3, #28]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000024 	.word	0x20000024
 8002930:	40022000 	.word	0x40022000

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002942:	e15a      	b.n	8002bfa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	4013      	ands	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 814c 	beq.w	8002bf4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d005      	beq.n	8002974 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002970:	2b02      	cmp	r3, #2
 8002972:	d130      	bne.n	80029d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029aa:	2201      	movs	r2, #1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 0201 	and.w	r2, r3, #1
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d017      	beq.n	8002a12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d123      	bne.n	8002a66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	08da      	lsrs	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3208      	adds	r2, #8
 8002a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	220f      	movs	r2, #15
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	6939      	ldr	r1, [r7, #16]
 8002a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2203      	movs	r2, #3
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0203 	and.w	r2, r3, #3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80a6 	beq.w	8002bf4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8002c18 <HAL_GPIO_Init+0x2e4>)
 8002aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aac:	4a5a      	ldr	r2, [pc, #360]	@ (8002c18 <HAL_GPIO_Init+0x2e4>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ab4:	4b58      	ldr	r3, [pc, #352]	@ (8002c18 <HAL_GPIO_Init+0x2e4>)
 8002ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ac0:	4a56      	ldr	r2, [pc, #344]	@ (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	220f      	movs	r2, #15
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002aea:	d01f      	beq.n	8002b2c <HAL_GPIO_Init+0x1f8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a4c      	ldr	r2, [pc, #304]	@ (8002c20 <HAL_GPIO_Init+0x2ec>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d019      	beq.n	8002b28 <HAL_GPIO_Init+0x1f4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a4b      	ldr	r2, [pc, #300]	@ (8002c24 <HAL_GPIO_Init+0x2f0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <HAL_GPIO_Init+0x1f0>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a4a      	ldr	r2, [pc, #296]	@ (8002c28 <HAL_GPIO_Init+0x2f4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00d      	beq.n	8002b20 <HAL_GPIO_Init+0x1ec>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a49      	ldr	r2, [pc, #292]	@ (8002c2c <HAL_GPIO_Init+0x2f8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d007      	beq.n	8002b1c <HAL_GPIO_Init+0x1e8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a48      	ldr	r2, [pc, #288]	@ (8002c30 <HAL_GPIO_Init+0x2fc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d101      	bne.n	8002b18 <HAL_GPIO_Init+0x1e4>
 8002b14:	2305      	movs	r3, #5
 8002b16:	e00a      	b.n	8002b2e <HAL_GPIO_Init+0x1fa>
 8002b18:	2306      	movs	r3, #6
 8002b1a:	e008      	b.n	8002b2e <HAL_GPIO_Init+0x1fa>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e006      	b.n	8002b2e <HAL_GPIO_Init+0x1fa>
 8002b20:	2303      	movs	r3, #3
 8002b22:	e004      	b.n	8002b2e <HAL_GPIO_Init+0x1fa>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_Init+0x1fa>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_GPIO_Init+0x1fa>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	f002 0203 	and.w	r2, r2, #3
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	4093      	lsls	r3, r2
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b3e:	4937      	ldr	r1, [pc, #220]	@ (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b4c:	4b39      	ldr	r3, [pc, #228]	@ (8002c34 <HAL_GPIO_Init+0x300>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b70:	4a30      	ldr	r2, [pc, #192]	@ (8002c34 <HAL_GPIO_Init+0x300>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b76:	4b2f      	ldr	r3, [pc, #188]	@ (8002c34 <HAL_GPIO_Init+0x300>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b9a:	4a26      	ldr	r2, [pc, #152]	@ (8002c34 <HAL_GPIO_Init+0x300>)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ba0:	4b24      	ldr	r3, [pc, #144]	@ (8002c34 <HAL_GPIO_Init+0x300>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c34 <HAL_GPIO_Init+0x300>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bca:	4b1a      	ldr	r3, [pc, #104]	@ (8002c34 <HAL_GPIO_Init+0x300>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bee:	4a11      	ldr	r2, [pc, #68]	@ (8002c34 <HAL_GPIO_Init+0x300>)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f47f ae9d 	bne.w	8002944 <HAL_GPIO_Init+0x10>
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	48000400 	.word	0x48000400
 8002c24:	48000800 	.word	0x48000800
 8002c28:	48000c00 	.word	0x48000c00
 8002c2c:	48001000 	.word	0x48001000
 8002c30:	48001400 	.word	0x48001400
 8002c34:	40010400 	.word	0x40010400

08002c38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002c46:	e0bd      	b.n	8002dc4 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002c48:	2201      	movs	r2, #1
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	4013      	ands	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80b0 	beq.w	8002dbe <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c5e:	4a60      	ldr	r2, [pc, #384]	@ (8002de0 <HAL_GPIO_DeInit+0x1a8>)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	3302      	adds	r3, #2
 8002c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	220f      	movs	r2, #15
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c86:	d01f      	beq.n	8002cc8 <HAL_GPIO_DeInit+0x90>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a56      	ldr	r2, [pc, #344]	@ (8002de4 <HAL_GPIO_DeInit+0x1ac>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d019      	beq.n	8002cc4 <HAL_GPIO_DeInit+0x8c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a55      	ldr	r2, [pc, #340]	@ (8002de8 <HAL_GPIO_DeInit+0x1b0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <HAL_GPIO_DeInit+0x88>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a54      	ldr	r2, [pc, #336]	@ (8002dec <HAL_GPIO_DeInit+0x1b4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00d      	beq.n	8002cbc <HAL_GPIO_DeInit+0x84>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a53      	ldr	r2, [pc, #332]	@ (8002df0 <HAL_GPIO_DeInit+0x1b8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d007      	beq.n	8002cb8 <HAL_GPIO_DeInit+0x80>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a52      	ldr	r2, [pc, #328]	@ (8002df4 <HAL_GPIO_DeInit+0x1bc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d101      	bne.n	8002cb4 <HAL_GPIO_DeInit+0x7c>
 8002cb0:	2305      	movs	r3, #5
 8002cb2:	e00a      	b.n	8002cca <HAL_GPIO_DeInit+0x92>
 8002cb4:	2306      	movs	r3, #6
 8002cb6:	e008      	b.n	8002cca <HAL_GPIO_DeInit+0x92>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	e006      	b.n	8002cca <HAL_GPIO_DeInit+0x92>
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e004      	b.n	8002cca <HAL_GPIO_DeInit+0x92>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e002      	b.n	8002cca <HAL_GPIO_DeInit+0x92>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_GPIO_DeInit+0x92>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	f002 0203 	and.w	r2, r2, #3
 8002cd0:	0092      	lsls	r2, r2, #2
 8002cd2:	4093      	lsls	r3, r2
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d132      	bne.n	8002d40 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002cda:	4b47      	ldr	r3, [pc, #284]	@ (8002df8 <HAL_GPIO_DeInit+0x1c0>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	4945      	ldr	r1, [pc, #276]	@ (8002df8 <HAL_GPIO_DeInit+0x1c0>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002ce8:	4b43      	ldr	r3, [pc, #268]	@ (8002df8 <HAL_GPIO_DeInit+0x1c0>)
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	4941      	ldr	r1, [pc, #260]	@ (8002df8 <HAL_GPIO_DeInit+0x1c0>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002cf6:	4b40      	ldr	r3, [pc, #256]	@ (8002df8 <HAL_GPIO_DeInit+0x1c0>)
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	493e      	ldr	r1, [pc, #248]	@ (8002df8 <HAL_GPIO_DeInit+0x1c0>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002d04:	4b3c      	ldr	r3, [pc, #240]	@ (8002df8 <HAL_GPIO_DeInit+0x1c0>)
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	493a      	ldr	r1, [pc, #232]	@ (8002df8 <HAL_GPIO_DeInit+0x1c0>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002d22:	4a2f      	ldr	r2, [pc, #188]	@ (8002de0 <HAL_GPIO_DeInit+0x1a8>)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	43da      	mvns	r2, r3
 8002d32:	482b      	ldr	r0, [pc, #172]	@ (8002de0 <HAL_GPIO_DeInit+0x1a8>)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	400a      	ands	r2, r1
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	2103      	movs	r1, #3
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	08da      	lsrs	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3208      	adds	r2, #8
 8002d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	08d2      	lsrs	r2, r2, #3
 8002d74:	4019      	ands	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3208      	adds	r2, #8
 8002d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2103      	movs	r1, #3
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	401a      	ands	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2103      	movs	r1, #3
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	401a      	ands	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f47f af3b 	bne.w	8002c48 <HAL_GPIO_DeInit+0x10>
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40010000 	.word	0x40010000
 8002de4:	48000400 	.word	0x48000400
 8002de8:	48000800 	.word	0x48000800
 8002dec:	48000c00 	.word	0x48000c00
 8002df0:	48001000 	.word	0x48001000
 8002df4:	48001400 	.word	0x48001400
 8002df8:	40010400 	.word	0x40010400

08002dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e0c:	787b      	ldrb	r3, [r7, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d141      	bne.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e46:	d131      	bne.n	8002eac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e48:	4b47      	ldr	r3, [pc, #284]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e4e:	4a46      	ldr	r2, [pc, #280]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e58:	4b43      	ldr	r3, [pc, #268]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e60:	4a41      	ldr	r2, [pc, #260]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e68:	4b40      	ldr	r3, [pc, #256]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2232      	movs	r2, #50	@ 0x32
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	4a3f      	ldr	r2, [pc, #252]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	0c9b      	lsrs	r3, r3, #18
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7e:	e002      	b.n	8002e86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e86:	4b38      	ldr	r3, [pc, #224]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e92:	d102      	bne.n	8002e9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f2      	bne.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e9a:	4b33      	ldr	r3, [pc, #204]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea6:	d158      	bne.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e057      	b.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002eac:	4b2e      	ldr	r3, [pc, #184]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eb2:	4a2d      	ldr	r2, [pc, #180]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ebc:	e04d      	b.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec4:	d141      	bne.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ec6:	4b28      	ldr	r3, [pc, #160]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed2:	d131      	bne.n	8002f38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ed4:	4b24      	ldr	r3, [pc, #144]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eda:	4a23      	ldr	r2, [pc, #140]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ee4:	4b20      	ldr	r3, [pc, #128]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002eec:	4a1e      	ldr	r2, [pc, #120]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2232      	movs	r2, #50	@ 0x32
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	4a1c      	ldr	r2, [pc, #112]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	0c9b      	lsrs	r3, r3, #18
 8002f06:	3301      	adds	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0a:	e002      	b.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f12:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f1e:	d102      	bne.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f2      	bne.n	8002f0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f26:	4b10      	ldr	r3, [pc, #64]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f32:	d112      	bne.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e011      	b.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f48:	e007      	b.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f4a:	4b07      	ldr	r3, [pc, #28]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f52:	4a05      	ldr	r2, [pc, #20]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	20000018 	.word	0x20000018
 8002f70:	431bde83 	.word	0x431bde83

08002f74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a04      	ldr	r2, [pc, #16]	@ (8002f90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f82:	6093      	str	r3, [r2, #8]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40007000 	.word	0x40007000

08002f94 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f9a:	f7fe fca1 	bl	80018e0 <HAL_GetTick>
 8002f9e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002fa0:	4b39      	ldr	r3, [pc, #228]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a38      	ldr	r2, [pc, #224]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002faa:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fae:	f7fe fc97 	bl	80018e0 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e05f      	b.n	8003080 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc0:	4b31      	ldr	r3, [pc, #196]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8002fd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fd6:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fd8:	f7fe fc82 	bl	80018e0 <HAL_GetTick>
 8002fdc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 8002fde:	4b2a      	ldr	r3, [pc, #168]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe6:	f7fe fc7b 	bl	80018e0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e041      	b.n	8003080 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002ffc:	4b22      	ldr	r3, [pc, #136]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b04      	cmp	r3, #4
 8003006:	d1ee      	bne.n	8002fe6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003008:	4b20      	ldr	r3, [pc, #128]	@ (800308c <HAL_RCC_DeInit+0xf8>)
 800300a:	4a21      	ldr	r2, [pc, #132]	@ (8003090 <HAL_RCC_DeInit+0xfc>)
 800300c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800300e:	4b21      	ldr	r3, [pc, #132]	@ (8003094 <HAL_RCC_DeInit+0x100>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fc18 	bl	8001848 <HAL_InitTick>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e02e      	b.n	8003080 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003022:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8003024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003028:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800302a:	4b17      	ldr	r3, [pc, #92]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 800302c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003030:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003032:	f7fe fc55 	bl	80018e0 <HAL_GetTick>
 8003036:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7fe fc51 	bl	80018e0 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e019      	b.n	8003080 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	4b0e      	ldr	r3, [pc, #56]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8003058:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 800305a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800305e:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8003060:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8003066:	4b08      	ldr	r3, [pc, #32]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8003068:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800306c:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8003070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003074:	4a04      	ldr	r2, [pc, #16]	@ (8003088 <HAL_RCC_DeInit+0xf4>)
 8003076:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800307a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	20000018 	.word	0x20000018
 8003090:	00f42400 	.word	0x00f42400
 8003094:	2000001c 	.word	0x2000001c

08003098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e2fe      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d075      	beq.n	80031a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b6:	4b97      	ldr	r3, [pc, #604]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c0:	4b94      	ldr	r3, [pc, #592]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	d102      	bne.n	80030d6 <HAL_RCC_OscConfig+0x3e>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d002      	beq.n	80030dc <HAL_RCC_OscConfig+0x44>
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d10b      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	4b8d      	ldr	r3, [pc, #564]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05b      	beq.n	80031a0 <HAL_RCC_OscConfig+0x108>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d157      	bne.n	80031a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e2d9      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x74>
 80030fe:	4b85      	ldr	r3, [pc, #532]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a84      	ldr	r2, [pc, #528]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x98>
 8003116:	4b7f      	ldr	r3, [pc, #508]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7e      	ldr	r2, [pc, #504]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b7c      	ldr	r3, [pc, #496]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a7b      	ldr	r2, [pc, #492]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 8003130:	4b78      	ldr	r3, [pc, #480]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a77      	ldr	r2, [pc, #476]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b75      	ldr	r3, [pc, #468]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a74      	ldr	r2, [pc, #464]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe fbc6 	bl	80018e0 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe fbc2 	bl	80018e0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e29e      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800316a:	4b6a      	ldr	r3, [pc, #424]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xc0>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe fbb2 	bl	80018e0 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe fbae 	bl	80018e0 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	@ 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e28a      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003192:	4b60      	ldr	r3, [pc, #384]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0xe8>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d075      	beq.n	800329a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ae:	4b59      	ldr	r3, [pc, #356]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031b8:	4b56      	ldr	r3, [pc, #344]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d102      	bne.n	80031ce <HAL_RCC_OscConfig+0x136>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d002      	beq.n	80031d4 <HAL_RCC_OscConfig+0x13c>
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d11f      	bne.n	8003214 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_OscConfig+0x154>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e25d      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b49      	ldr	r3, [pc, #292]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	4946      	ldr	r1, [pc, #280]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003200:	4b45      	ldr	r3, [pc, #276]	@ (8003318 <HAL_RCC_OscConfig+0x280>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe fb1f 	bl	8001848 <HAL_InitTick>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d043      	beq.n	8003298 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e249      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d023      	beq.n	8003264 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321c:	4b3d      	ldr	r3, [pc, #244]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a3c      	ldr	r2, [pc, #240]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe fb5a 	bl	80018e0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003230:	f7fe fb56 	bl	80018e0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e232      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003242:	4b34      	ldr	r3, [pc, #208]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b31      	ldr	r3, [pc, #196]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	492d      	ldr	r1, [pc, #180]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
 8003262:	e01a      	b.n	800329a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003264:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2a      	ldr	r2, [pc, #168]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 800326a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800326e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe fb36 	bl	80018e0 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003278:	f7fe fb32 	bl	80018e0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e20e      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800328a:	4b22      	ldr	r3, [pc, #136]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x1e0>
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003298:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d041      	beq.n	800332a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ae:	4b19      	ldr	r3, [pc, #100]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b4:	4a17      	ldr	r2, [pc, #92]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe fb0f 	bl	80018e0 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c6:	f7fe fb0b 	bl	80018e0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1e7      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0ef      	beq.n	80032c6 <HAL_RCC_OscConfig+0x22e>
 80032e6:	e020      	b.n	800332a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ee:	4a09      	ldr	r2, [pc, #36]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fe faf2 	bl	80018e0 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032fe:	e00d      	b.n	800331c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003300:	f7fe faee 	bl	80018e0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d906      	bls.n	800331c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e1ca      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800331c:	4b8c      	ldr	r3, [pc, #560]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800331e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ea      	bne.n	8003300 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80a6 	beq.w	8003484 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800333c:	4b84      	ldr	r3, [pc, #528]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x2b4>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x2b6>
 800334c:	2300      	movs	r3, #0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00d      	beq.n	800336e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	4b7f      	ldr	r3, [pc, #508]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003356:	4a7e      	ldr	r2, [pc, #504]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335c:	6593      	str	r3, [r2, #88]	@ 0x58
 800335e:	4b7c      	ldr	r3, [pc, #496]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800336a:	2301      	movs	r3, #1
 800336c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336e:	4b79      	ldr	r3, [pc, #484]	@ (8003554 <HAL_RCC_OscConfig+0x4bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d118      	bne.n	80033ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800337a:	4b76      	ldr	r3, [pc, #472]	@ (8003554 <HAL_RCC_OscConfig+0x4bc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a75      	ldr	r2, [pc, #468]	@ (8003554 <HAL_RCC_OscConfig+0x4bc>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003386:	f7fe faab 	bl	80018e0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338e:	f7fe faa7 	bl	80018e0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e183      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003554 <HAL_RCC_OscConfig+0x4bc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d108      	bne.n	80033c6 <HAL_RCC_OscConfig+0x32e>
 80033b4:	4b66      	ldr	r3, [pc, #408]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ba:	4a65      	ldr	r2, [pc, #404]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033c4:	e024      	b.n	8003410 <HAL_RCC_OscConfig+0x378>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d110      	bne.n	80033f0 <HAL_RCC_OscConfig+0x358>
 80033ce:	4b60      	ldr	r3, [pc, #384]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d4:	4a5e      	ldr	r2, [pc, #376]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033de:	4b5c      	ldr	r3, [pc, #368]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ee:	e00f      	b.n	8003410 <HAL_RCC_OscConfig+0x378>
 80033f0:	4b57      	ldr	r3, [pc, #348]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	4a56      	ldr	r2, [pc, #344]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003400:	4b53      	ldr	r3, [pc, #332]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003406:	4a52      	ldr	r2, [pc, #328]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d016      	beq.n	8003446 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fe fa62 	bl	80018e0 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fe fa5e 	bl	80018e0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e138      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003436:	4b46      	ldr	r3, [pc, #280]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ed      	beq.n	8003420 <HAL_RCC_OscConfig+0x388>
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fe fa4b 	bl	80018e0 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fe fa47 	bl	80018e0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e121      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003464:	4b3a      	ldr	r3, [pc, #232]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ed      	bne.n	800344e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003472:	7ffb      	ldrb	r3, [r7, #31]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003478:	4b35      	ldr	r3, [pc, #212]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347c:	4a34      	ldr	r2, [pc, #208]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d03c      	beq.n	800350a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01c      	beq.n	80034d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003498:	4b2d      	ldr	r3, [pc, #180]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800349a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800349e:	4a2c      	ldr	r2, [pc, #176]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fe fa1a 	bl	80018e0 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b0:	f7fe fa16 	bl	80018e0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0f2      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034c2:	4b23      	ldr	r3, [pc, #140]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80034c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ef      	beq.n	80034b0 <HAL_RCC_OscConfig+0x418>
 80034d0:	e01b      	b.n	800350a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80034d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fe f9fd 	bl	80018e0 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ea:	f7fe f9f9 	bl	80018e0 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0d5      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034fc:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80034fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ef      	bne.n	80034ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80c9 	beq.w	80036a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003514:	4b0e      	ldr	r3, [pc, #56]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b0c      	cmp	r3, #12
 800351e:	f000 8083 	beq.w	8003628 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d15e      	bne.n	80035e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352a:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a08      	ldr	r2, [pc, #32]	@ (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003530:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fe f9d3 	bl	80018e0 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353c:	e00c      	b.n	8003558 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7fe f9cf 	bl	80018e0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d905      	bls.n	8003558 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0ab      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
 8003550:	40021000 	.word	0x40021000
 8003554:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003558:	4b55      	ldr	r3, [pc, #340]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ec      	bne.n	800353e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003564:	4b52      	ldr	r3, [pc, #328]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	4b52      	ldr	r3, [pc, #328]	@ (80036b4 <HAL_RCC_OscConfig+0x61c>)
 800356a:	4013      	ands	r3, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6a11      	ldr	r1, [r2, #32]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003574:	3a01      	subs	r2, #1
 8003576:	0112      	lsls	r2, r2, #4
 8003578:	4311      	orrs	r1, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800357e:	0212      	lsls	r2, r2, #8
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003586:	0852      	lsrs	r2, r2, #1
 8003588:	3a01      	subs	r2, #1
 800358a:	0552      	lsls	r2, r2, #21
 800358c:	4311      	orrs	r1, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003592:	0852      	lsrs	r2, r2, #1
 8003594:	3a01      	subs	r2, #1
 8003596:	0652      	lsls	r2, r2, #25
 8003598:	4311      	orrs	r1, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800359e:	06d2      	lsls	r2, r2, #27
 80035a0:	430a      	orrs	r2, r1
 80035a2:	4943      	ldr	r1, [pc, #268]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a8:	4b41      	ldr	r3, [pc, #260]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a40      	ldr	r2, [pc, #256]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b4:	4b3e      	ldr	r3, [pc, #248]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a3d      	ldr	r2, [pc, #244]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe f98e 	bl	80018e0 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe f98a 	bl	80018e0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e066      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035da:	4b35      	ldr	r3, [pc, #212]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x530>
 80035e6:	e05e      	b.n	80036a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	4b31      	ldr	r3, [pc, #196]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a30      	ldr	r2, [pc, #192]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe f974 	bl	80018e0 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe f970 	bl	80018e0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e04c      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360e:	4b28      	ldr	r3, [pc, #160]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800361a:	4b25      	ldr	r3, [pc, #148]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	4924      	ldr	r1, [pc, #144]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 8003620:	4b25      	ldr	r3, [pc, #148]	@ (80036b8 <HAL_RCC_OscConfig+0x620>)
 8003622:	4013      	ands	r3, r2
 8003624:	60cb      	str	r3, [r1, #12]
 8003626:	e03e      	b.n	80036a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e039      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003634:	4b1e      	ldr	r3, [pc, #120]	@ (80036b0 <HAL_RCC_OscConfig+0x618>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0203 	and.w	r2, r3, #3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	429a      	cmp	r2, r3
 8003646:	d12c      	bne.n	80036a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	3b01      	subs	r3, #1
 8003654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d123      	bne.n	80036a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d11b      	bne.n	80036a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d113      	bne.n	80036a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	3b01      	subs	r3, #1
 8003688:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d109      	bne.n	80036a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	3b01      	subs	r3, #1
 800369c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	019f800c 	.word	0x019f800c
 80036b8:	feeefffc 	.word	0xfeeefffc

080036bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e11e      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d4:	4b91      	ldr	r3, [pc, #580]	@ (800391c <HAL_RCC_ClockConfig+0x260>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d910      	bls.n	8003704 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b8e      	ldr	r3, [pc, #568]	@ (800391c <HAL_RCC_ClockConfig+0x260>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 020f 	bic.w	r2, r3, #15
 80036ea:	498c      	ldr	r1, [pc, #560]	@ (800391c <HAL_RCC_ClockConfig+0x260>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b8a      	ldr	r3, [pc, #552]	@ (800391c <HAL_RCC_ClockConfig+0x260>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e106      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d073      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d129      	bne.n	800376c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003718:	4b81      	ldr	r3, [pc, #516]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0f4      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003728:	f000 f9ac 	bl	8003a84 <RCC_GetSysClockFreqFromPLLSource>
 800372c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4a7c      	ldr	r2, [pc, #496]	@ (8003924 <HAL_RCC_ClockConfig+0x268>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d93f      	bls.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003736:	4b7a      	ldr	r3, [pc, #488]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800374a:	2b00      	cmp	r3, #0
 800374c:	d033      	beq.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003752:	2b00      	cmp	r3, #0
 8003754:	d12f      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003756:	4b72      	ldr	r3, [pc, #456]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800375e:	4a70      	ldr	r2, [pc, #448]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003764:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003766:	2380      	movs	r3, #128	@ 0x80
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e024      	b.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d107      	bne.n	8003784 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003774:	4b6a      	ldr	r3, [pc, #424]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0c6      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003784:	4b66      	ldr	r3, [pc, #408]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0be      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003794:	f000 f914 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 8003798:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4a61      	ldr	r2, [pc, #388]	@ (8003924 <HAL_RCC_ClockConfig+0x268>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d909      	bls.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037b2:	2380      	movs	r3, #128	@ 0x80
 80037b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b6:	4b5a      	ldr	r3, [pc, #360]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4957      	ldr	r1, [pc, #348]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c8:	f7fe f88a 	bl	80018e0 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d0:	f7fe f886 	bl	80018e0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e095      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 020c 	and.w	r2, r3, #12
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d1eb      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d023      	beq.n	800384c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003810:	4b43      	ldr	r3, [pc, #268]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a42      	ldr	r2, [pc, #264]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003816:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800381a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003828:	4b3d      	ldr	r3, [pc, #244]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003830:	4a3b      	ldr	r2, [pc, #236]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003832:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003836:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003838:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4936      	ldr	r1, [pc, #216]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
 800384a:	e008      	b.n	800385e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2b80      	cmp	r3, #128	@ 0x80
 8003850:	d105      	bne.n	800385e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003852:	4b33      	ldr	r3, [pc, #204]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4a32      	ldr	r2, [pc, #200]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003858:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800385c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800385e:	4b2f      	ldr	r3, [pc, #188]	@ (800391c <HAL_RCC_ClockConfig+0x260>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d21d      	bcs.n	80038a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386c:	4b2b      	ldr	r3, [pc, #172]	@ (800391c <HAL_RCC_ClockConfig+0x260>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 020f 	bic.w	r2, r3, #15
 8003874:	4929      	ldr	r1, [pc, #164]	@ (800391c <HAL_RCC_ClockConfig+0x260>)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800387c:	f7fe f830 	bl	80018e0 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fe f82c 	bl	80018e0 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e03b      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b20      	ldr	r3, [pc, #128]	@ (800391c <HAL_RCC_ClockConfig+0x260>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1ed      	bne.n	8003884 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4917      	ldr	r1, [pc, #92]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d2:	4b13      	ldr	r3, [pc, #76]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	490f      	ldr	r1, [pc, #60]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038e6:	f000 f86b 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 80038ea:	4602      	mov	r2, r0
 80038ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	490c      	ldr	r1, [pc, #48]	@ (8003928 <HAL_RCC_ClockConfig+0x26c>)
 80038f8:	5ccb      	ldrb	r3, [r1, r3]
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	4a0a      	ldr	r2, [pc, #40]	@ (800392c <HAL_RCC_ClockConfig+0x270>)
 8003904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003906:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <HAL_RCC_ClockConfig+0x274>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd ff9c 	bl	8001848 <HAL_InitTick>
 8003910:	4603      	mov	r3, r0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40022000 	.word	0x40022000
 8003920:	40021000 	.word	0x40021000
 8003924:	04c4b400 	.word	0x04c4b400
 8003928:	08004228 	.word	0x08004228
 800392c:	20000018 	.word	0x20000018
 8003930:	2000001c 	.word	0x2000001c

08003934 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08c      	sub	sp, #48	@ 0x30
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003944:	2303      	movs	r3, #3
 8003946:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003952:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8003960:	029b      	lsls	r3, r3, #10
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800396e:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <HAL_RCC_MCOConfig+0x88>)
 8003970:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003972:	2101      	movs	r1, #1
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	4910      	ldr	r1, [pc, #64]	@ (80039bc <HAL_RCC_MCOConfig+0x88>)
 800397c:	4313      	orrs	r3, r2
 800397e:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	b29b      	uxth	r3, r3
 8003984:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	0d1b      	lsrs	r3, r3, #20
 800398a:	b2db      	uxtb	r3, r3
 800398c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800398e:	f107 0310 	add.w	r3, r7, #16
 8003992:	4619      	mov	r1, r3
 8003994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003996:	f7fe ffcd 	bl	8002934 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800399a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80039a0:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <HAL_RCC_MCOConfig+0x88>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	4903      	ldr	r1, [pc, #12]	@ (80039bc <HAL_RCC_MCOConfig+0x88>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]
  }
}
 80039b4:	bf00      	nop
 80039b6:	3730      	adds	r7, #48	@ 0x30
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000

080039c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d102      	bne.n	80039d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039d2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	e047      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039d8:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 030c 	and.w	r3, r3, #12
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d102      	bne.n	80039ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039e4:	4b26      	ldr	r3, [pc, #152]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e03e      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039ea:	4b23      	ldr	r3, [pc, #140]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d136      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039f6:	4b20      	ldr	r3, [pc, #128]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a00:	4b1d      	ldr	r3, [pc, #116]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d10c      	bne.n	8003a2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a14:	4a1a      	ldr	r2, [pc, #104]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	4a16      	ldr	r2, [pc, #88]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a1e:	68d2      	ldr	r2, [r2, #12]
 8003a20:	0a12      	lsrs	r2, r2, #8
 8003a22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	617b      	str	r3, [r7, #20]
      break;
 8003a2c:	e00c      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a2e:	4a13      	ldr	r2, [pc, #76]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	4a10      	ldr	r2, [pc, #64]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a38:	68d2      	ldr	r2, [r2, #12]
 8003a3a:	0a12      	lsrs	r2, r2, #8
 8003a3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a40:	fb02 f303 	mul.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]
      break;
 8003a46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a48:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	0e5b      	lsrs	r3, r3, #25
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	3301      	adds	r3, #1
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	e001      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a68:	693b      	ldr	r3, [r7, #16]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	00f42400 	.word	0x00f42400
 8003a80:	016e3600 	.word	0x016e3600

08003a84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a94:	4b1b      	ldr	r3, [pc, #108]	@ (8003b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d10c      	bne.n	8003ac2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aa8:	4a17      	ldr	r2, [pc, #92]	@ (8003b08 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	4a14      	ldr	r2, [pc, #80]	@ (8003b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ab2:	68d2      	ldr	r2, [r2, #12]
 8003ab4:	0a12      	lsrs	r2, r2, #8
 8003ab6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	617b      	str	r3, [r7, #20]
    break;
 8003ac0:	e00c      	b.n	8003adc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ac2:	4a12      	ldr	r2, [pc, #72]	@ (8003b0c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aca:	4a0e      	ldr	r2, [pc, #56]	@ (8003b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003acc:	68d2      	ldr	r2, [r2, #12]
 8003ace:	0a12      	lsrs	r2, r2, #8
 8003ad0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
    break;
 8003ada:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003adc:	4b09      	ldr	r3, [pc, #36]	@ (8003b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	0e5b      	lsrs	r3, r3, #25
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003af6:	687b      	ldr	r3, [r7, #4]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40021000 	.word	0x40021000
 8003b08:	016e3600 	.word	0x016e3600
 8003b0c:	00f42400 	.word	0x00f42400

08003b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b18:	2300      	movs	r3, #0
 8003b1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8098 	beq.w	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b32:	4b43      	ldr	r3, [pc, #268]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10d      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3e:	4b40      	ldr	r3, [pc, #256]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	4a3f      	ldr	r2, [pc, #252]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b56:	2301      	movs	r3, #1
 8003b58:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a39      	ldr	r2, [pc, #228]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b66:	f7fd febb 	bl	80018e0 <HAL_GetTick>
 8003b6a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b6c:	e009      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6e:	f7fd feb7 	bl	80018e0 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d902      	bls.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	74fb      	strb	r3, [r7, #19]
        break;
 8003b80:	e005      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b82:	4b30      	ldr	r3, [pc, #192]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0ef      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d159      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b94:	4b2a      	ldr	r3, [pc, #168]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b9e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01e      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d019      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bb0:	4b23      	ldr	r3, [pc, #140]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bbc:	4b20      	ldr	r3, [pc, #128]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bdc:	4a18      	ldr	r2, [pc, #96]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fd fe77 	bl	80018e0 <HAL_GetTick>
 8003bf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf4:	e00b      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf6:	f7fd fe73 	bl	80018e0 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d902      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	74fb      	strb	r3, [r7, #19]
            break;
 8003c0c:	e006      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0ec      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c22:	4b07      	ldr	r3, [pc, #28]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c30:	4903      	ldr	r1, [pc, #12]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c38:	e008      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
 8003c3c:	74bb      	strb	r3, [r7, #18]
 8003c3e:	e005      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c48:	7cfb      	ldrb	r3, [r7, #19]
 8003c4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c4c:	7c7b      	ldrb	r3, [r7, #17]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c52:	4ba7      	ldr	r3, [pc, #668]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c56:	4aa6      	ldr	r2, [pc, #664]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c6a:	4ba1      	ldr	r3, [pc, #644]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c70:	f023 0203 	bic.w	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	499d      	ldr	r1, [pc, #628]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c8c:	4b98      	ldr	r3, [pc, #608]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	f023 020c 	bic.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	4995      	ldr	r1, [pc, #596]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cae:	4b90      	ldr	r3, [pc, #576]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	498c      	ldr	r1, [pc, #560]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cd0:	4b87      	ldr	r3, [pc, #540]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	4984      	ldr	r1, [pc, #528]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	497b      	ldr	r1, [pc, #492]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d14:	4b76      	ldr	r3, [pc, #472]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	4973      	ldr	r1, [pc, #460]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d36:	4b6e      	ldr	r3, [pc, #440]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	496a      	ldr	r1, [pc, #424]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d58:	4b65      	ldr	r3, [pc, #404]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	4962      	ldr	r1, [pc, #392]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	4959      	ldr	r1, [pc, #356]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d9c:	4b54      	ldr	r3, [pc, #336]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003da2:	f023 0203 	bic.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003daa:	4951      	ldr	r1, [pc, #324]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dcc:	4948      	ldr	r1, [pc, #288]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de0:	4b43      	ldr	r3, [pc, #268]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	4940      	ldr	r1, [pc, #256]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e00:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4a3a      	ldr	r2, [pc, #232]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e0a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e18:	4b35      	ldr	r3, [pc, #212]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e26:	4932      	ldr	r1, [pc, #200]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e36:	d105      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e38:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e42:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e50:	4b27      	ldr	r3, [pc, #156]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	4924      	ldr	r1, [pc, #144]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e70:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e88:	4b19      	ldr	r3, [pc, #100]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e96:	4916      	ldr	r1, [pc, #88]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea8:	4b11      	ldr	r3, [pc, #68]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a10      	ldr	r2, [pc, #64]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eb2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d019      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	4908      	ldr	r1, [pc, #32]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ede:	d109      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee0:	4b03      	ldr	r3, [pc, #12]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a02      	ldr	r2, [pc, #8]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eea:	60d3      	str	r3, [r2, #12]
 8003eec:	e002      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d015      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f00:	4b29      	ldr	r3, [pc, #164]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	4926      	ldr	r1, [pc, #152]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f20:	4b21      	ldr	r3, [pc, #132]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4a20      	ldr	r2, [pc, #128]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d015      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f38:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f46:	4918      	ldr	r1, [pc, #96]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f56:	d105      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f58:	4b13      	ldr	r3, [pc, #76]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a12      	ldr	r2, [pc, #72]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d015      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f70:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	490a      	ldr	r1, [pc, #40]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f8e:	d105      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f90:	4b05      	ldr	r3, [pc, #20]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4a04      	ldr	r2, [pc, #16]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000

08003fac <memset>:
 8003fac:	4402      	add	r2, r0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d100      	bne.n	8003fb6 <memset+0xa>
 8003fb4:	4770      	bx	lr
 8003fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fba:	e7f9      	b.n	8003fb0 <memset+0x4>

08003fbc <__libc_init_array>:
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8003ff4 <__libc_init_array+0x38>)
 8003fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ff8 <__libc_init_array+0x3c>)
 8003fc2:	1b64      	subs	r4, r4, r5
 8003fc4:	10a4      	asrs	r4, r4, #2
 8003fc6:	2600      	movs	r6, #0
 8003fc8:	42a6      	cmp	r6, r4
 8003fca:	d109      	bne.n	8003fe0 <__libc_init_array+0x24>
 8003fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8003ffc <__libc_init_array+0x40>)
 8003fce:	4c0c      	ldr	r4, [pc, #48]	@ (8004000 <__libc_init_array+0x44>)
 8003fd0:	f000 f818 	bl	8004004 <_init>
 8003fd4:	1b64      	subs	r4, r4, r5
 8003fd6:	10a4      	asrs	r4, r4, #2
 8003fd8:	2600      	movs	r6, #0
 8003fda:	42a6      	cmp	r6, r4
 8003fdc:	d105      	bne.n	8003fea <__libc_init_array+0x2e>
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
 8003fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe4:	4798      	blx	r3
 8003fe6:	3601      	adds	r6, #1
 8003fe8:	e7ee      	b.n	8003fc8 <__libc_init_array+0xc>
 8003fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fee:	4798      	blx	r3
 8003ff0:	3601      	adds	r6, #1
 8003ff2:	e7f2      	b.n	8003fda <__libc_init_array+0x1e>
 8003ff4:	08004248 	.word	0x08004248
 8003ff8:	08004248 	.word	0x08004248
 8003ffc:	08004248 	.word	0x08004248
 8004000:	0800424c 	.word	0x0800424c

08004004 <_init>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	bf00      	nop
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr

08004010 <_fini>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	bf00      	nop
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr
